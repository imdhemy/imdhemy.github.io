<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://imdhemy.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://imdhemy.com/" rel="alternate" type="text/html" /><updated>2024-11-16T13:17:06+00:00</updated><id>https://imdhemy.com/feed.xml</id><title type="html">Imdhemy</title><subtitle>I&apos;m a software artist, fullstack (BE heavy) with 10+ years of experience in software development. 
Passionate about open source, blogging, and reading.
</subtitle><author><name>Dhemy</name></author><entry><title type="html">There’s hole in my life and I need to fill it…soon</title><link href="https://imdhemy.com/blog/generic/a-hole-in-my-life.html/" rel="alternate" type="text/html" title="There’s hole in my life and I need to fill it…soon" /><published>2024-11-16T00:00:00+00:00</published><updated>2024-11-16T00:00:00+00:00</updated><id>https://imdhemy.com/blog/generic/a-hole-in-my-life</id><content type="html" xml:base="https://imdhemy.com/blog/generic/a-hole-in-my-life.html/"><![CDATA[<p>Well, you probably know that I’m an immigrant in Germany. I’ve been living here for almost two years. I can count the
number of connections I have in this country on my fingers, and my middle finger is enough to count the number of
friends I have. To add to that, all of them are from work. People around think I’m a workaholic, but the truth is, I’m
not. I just don’t know what to do with my time. I have some hobbies, but I developed them in a way that I can do them
alone. For a long time in Egypt, I had many friends, tons of connections, and was quite popular in my city, but I always
felt like a circle in a square hole.</p>

<p>Back to my hobbies: I’m a bookworm 🐛, I love reading, and I read a lot! I also love video games and chess. But, you
know, I started to play chess after I immigrated, and I play it online. I’m not even used to a physical chessboard.</p>

<p>I’m a social person with a sense of humor; that’s what people say about me. I’m also a good listener. One of my exes -
and I have many! - called me a “psychologist.” Sometimes, I feel like I don’t know how to make friends. I’ve always been
the one who was approached, even with girls. For sure, I’ve tried to approach some, but I always lose interest. I
probably have a fear of rejection that I enclose in a shell of indifference. I’m not a shy person; I’m straightforward.
I say what I think, I don’t like to play games, and sometimes I’m rude… no, many times… Haha! I commit and then I
regret!</p>

<p>Enough about me. I’m here to talk about the hole I’ve realized I have in my life. When I came to Germany, I was so
excited and I still am, but I didn’t realize that I was leaving behind a big part of me: my family, my friends, my bike.
Here in Germany, I have better opportunities, but something is missing. I can’t say that I’m not happy, but I’m not
satisfied. I don’t blame Germany. I came here already with a heavy heart. 💔</p>

<p>My first week in Germany was just after Salsabil, my ex, left me. I was devastated. I communicated with everyone that I
would start a new life in Germany and never look back. I thought it was just a matter of time until I learned the
language and would be able to make friends. I was wrong. Yeah, I haven’t learned the language yet, but I’ve seen many
immigrants who speak German fluently, and they still complain about the same thing. Am I wrong? I don’t know, but I will
keep trying.</p>

<p>From time to time, I receive notifications from Google Photos, reminding me of memories I had with Salsabil. To be
honest, I spend hours looking at these photos with mixed feelings. I miss her, but I’m comfortable not being with her.
She is a good person, but we were not meant to be together. For me, she was the one, but she didn’t accept my
weaknesses, my hopes, my dreams. I always felt exposed; the door was always open, and I was threatened to be scandalized
at any moment. She meant it or not, but I felt it. Anyway, she left…</p>

<video width="100%" preload="auto" controls="">
<source src="/assets/video/zaab-elgabal.MOV" type="video/mp4" />
</video>

<blockquote>
  <p>“Love and work… work and love, that’s all there is,” Sigmund Freud</p>
</blockquote>

<p>I’m not a workaholic, but there’s a hole in my life, and I need to fill it… soon.</p>]]></content><author><name>Dhemy</name></author><category term="generic" /><summary type="html"><![CDATA[Well, you probably know that I’m an immigrant in Germany. I’ve been living here for almost two years. I can count the number of connections I have in this country on my fingers, and my middle finger is enough to count the number of friends I have. To add to that, all of them are from work. People around think I’m a workaholic, but the truth is, I’m not. I just don’t know what to do with my time. I have some hobbies, but I developed them in a way that I can do them alone. For a long time in Egypt, I had many friends, tons of connections, and was quite popular in my city, but I always felt like a circle in a square hole.]]></summary></entry><entry><title type="html">Delivery on Time and Some Clean Up 🧹</title><link href="https://imdhemy.com/blog/generic/delivery-on-time-and-cleanup.html/" rel="alternate" type="text/html" title="Delivery on Time and Some Clean Up 🧹" /><published>2024-11-10T00:00:00+00:00</published><updated>2024-11-10T00:00:00+00:00</updated><id>https://imdhemy.com/blog/generic/delivery-on-time-and-cleanup</id><content type="html" xml:base="https://imdhemy.com/blog/generic/delivery-on-time-and-cleanup.html/"><![CDATA[<p>Delivering a project to a major client always brings a mix of excitement and relief. Last week, our team successfully
handed over a project to the Deutscher Fußball-Bund (<a href="https://www.dfb.de/">DFB</a>) right on schedule. The DFB, being the
German Football Association, is not only one of our biggest clients but also one of the largest football associations
globally. We had an online meeting to oversee the project’s launch and ensure everything went off without a hitch, and
it did! 🎉</p>

<p>During this time, I also decided to tackle some overdue cleaning tasks. From tidying up my desk and washing room
to organizing my kitchen and even my Git branches, it was a week of thorough cleanup.</p>

<p>My friend Eman introduced me to Hadeer, a talented organizer. She helped me organize my desk and plans to add some
aesthetic touches later.</p>

<p><img src="/assets/img/desk-bike.JPG" alt="Desk-Bike" />
I wanted to share a photo of my desk, but the surrounding mess still impacts its appearance.</p>

<p><img src="/assets/img/any-zhgt.PNG" alt="Zhgt" />
I’m thinking about either cleaning up the entire office or moving my desk to a different spot.</p>

<p>Another spot that needed attention was my PS4 desk:</p>

<p><img src="/assets/img/ps4.JPG" alt="PS4" /></p>

<p>The cable arrangement still bothers me, but I’ve ordered some cable management tools arriving tomorrow. Hopefully, it
will look much better after that.</p>

<p>On the tech side, I realized I had many local Git branches that were no longer needed since they had already been
merged. While Jetbrains IDEs can filter branches easily, I wanted to handle this cleanup from the terminal. So, I
updated my <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> file with a new alias tailored for our team’s workflow:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
    cleanup <span class="o">=</span> <span class="s2">"!f() { git branch | grep -v 'develop' | grep -v 'main' | grep -v 'master' | grep -v -E '^[0-9]+</span><span class="se">\\</span><span class="s2">.x' | grep -v '</span><span class="se">\\</span><span class="s2">*' | xargs git branch -D; }; f"</span>
</code></pre></div></div>

<p>This way, I can simply run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git cleanup
</code></pre></div></div>

<p>And all branches will be deleted except <code class="language-plaintext highlighter-rouge">develop</code>, <code class="language-plaintext highlighter-rouge">main</code>, <code class="language-plaintext highlighter-rouge">master</code>, and any <code class="language-plaintext highlighter-rouge">1.x</code> or similar branches.</p>

<p>Additionally, to keep my Git history clean, I configured my Git pulls to rebase:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>pull]
    rebase <span class="o">=</span> <span class="nb">true</span>
</code></pre></div></div>

<p>Typically, when you pull changes from a remote repository, Git merges them into your current branch. However, with
rebase enabled, Git reapplies your local commits on top of the fetched commits, creating a linear project history. This
keeps your commit history cleaner and more readable by avoiding unnecessary merge commits.</p>

<p>Wrapping up, it was a week of successful deliveries and much-needed organization. I’m looking forward to the next
steps… 🐾</p>]]></content><author><name>Dhemy</name></author><category term="generic" /><summary type="html"><![CDATA[Delivering a project to a major client always brings a mix of excitement and relief. Last week, our team successfully handed over a project to the Deutscher Fußball-Bund (DFB) right on schedule. The DFB, being the German Football Association, is not only one of our biggest clients but also one of the largest football associations globally. We had an online meeting to oversee the project’s launch and ensure everything went off without a hitch, and it did! 🎉]]></summary></entry><entry><title type="html">A Week of Goodbyes</title><link href="https://imdhemy.com/blog/generic/week-of-goodbyes.html/" rel="alternate" type="text/html" title="A Week of Goodbyes" /><published>2024-11-03T00:00:00+00:00</published><updated>2024-11-03T00:00:00+00:00</updated><id>https://imdhemy.com/blog/generic/week-of-goodbyes</id><content type="html" xml:base="https://imdhemy.com/blog/generic/week-of-goodbyes.html/"><![CDATA[<p>Change is an inevitable part of any workplace, often bringing both joyful farewells and challenging goodbyes. Recently,
our team experienced this duality with the departure of two colleagues—one celebrated and cherished, and the other
navigating a more difficult transition. I’ve been taught a valuable lesson last week!</p>

<h2 id="goodbye-benni">Goodbye, Benni</h2>

<p>Benjamin Berg, aka Benni, has left Reservix. He was a great colleague, and I wish him all the best for his future.
Although I didn’t have the chance to work on the same team as him, I enjoyed sharing the office with him for almost two
years. He was always friendly and helpful. Everyone acknowledges his impact on his team and the company, not only as a
developer but also for his leadership and ability to bring people together. I hope we can stay in touch and go
to <a href="https://www.tripadvisor.de/Restaurant_Review-g187337-d2166694-Reviews-Tatie_Food_Drinks-Frankfurt_Hesse.html?m=19905&amp;ref=imdhemy.com">Tatie</a>
together.</p>

<p>We had a farewell party at the office. It was emotional and fun, with pizza, drinks, and lots of laughs. Leonie shared a
fun questions box game with us. We had to answer questions like “How many times has this country won the World Cup?”
or “What is the name of this formula?” Rafi was impressive as always, and I was lucky to be on the same team as Benni.</p>

<p>The moment when Carsten gave Benni a present that was collectively bought by the team was very emotional. Benni was
especially happy when he saw a device that he wanted to try to automate his home. That was a great idea from Wiktor.
They were creative enough to give him a soundboard with some funny sounds to remind him of our soundboard in the office.</p>

<h2 id="another-team-member-moves-on">Another team member moves on</h2>

<p>Last week wasn’t easy for our team. The team decided to go to different ways with one our colleagues. She was a good
developer, but we couldn’t find a way to continue working together. I hope she finds a new job soon. I wish her all the
best.</p>

<p>At the end of the day, the people will remember how you made them feel, it’s not about how good you are at your job.
It’s also crucial to <a href="/blog/generic/the-pipeline-ate-my-code.html/">pay attention to the feedback</a> you receive and
to be open to change.</p>]]></content><author><name>Dhemy</name></author><category term="generic" /><summary type="html"><![CDATA[Change is an inevitable part of any workplace, often bringing both joyful farewells and challenging goodbyes. Recently, our team experienced this duality with the departure of two colleagues—one celebrated and cherished, and the other navigating a more difficult transition. I’ve been taught a valuable lesson last week!]]></summary></entry><entry><title type="html">HTTP Client Factory Code Refactoring</title><link href="https://imdhemy.com/blog/dev-log/http-client-factory-code-refactoring.html/" rel="alternate" type="text/html" title="HTTP Client Factory Code Refactoring" /><published>2024-10-27T00:00:00+00:00</published><updated>2024-10-27T00:00:00+00:00</updated><id>https://imdhemy.com/blog/dev-log/http-client-factory-code-refactoring</id><content type="html" xml:base="https://imdhemy.com/blog/dev-log/http-client-factory-code-refactoring.html/"><![CDATA[<p>I’m working on a Proxy/Adapter project, which we’ll call “Banana.” Banana is developed in TypeScript and uses Axios for
HTTP requests. It’s designed to communicate with different APIs, each with distinct authentication methods and
configurations.</p>

<p>The system started with a single API, “PeelAPI,” for which we provided a <code class="language-plaintext highlighter-rouge">createClient</code> function that returned an Axios
instance with the correct configuration. When we added a second API, “BunchAPI,” we created another <code class="language-plaintext highlighter-rouge">createClient</code>
function for it, but in a different subdomain. The same was done for the third API, “SplitAPI.” For each Axios instance,
we wrapped errors in a custom error class to identify the source of the error, accomplished by a response interceptor.</p>

<div class="tip">
  <p>One API, one <code class="language-plaintext highlighter-rouge">createClient</code>—simple, right? Fast forward to three APIs, and now it’s like juggling bananas 🍌🍌🍌 with TypeScript.</p>
</div>

<p>The issue is that we now have a lot of duplicated code, and the <code class="language-plaintext highlighter-rouge">createClient</code> functions break the Single Responsibility
Principle, as they are responsible for both creating the client and handling authentication. I’m uncertain whether it’s
best to keep error wrapping within the same function or move it to a separate module after the client is created.</p>

<p>To add complexity, since client tokens are cached in Redis, we need to pass the Cache service to the <code class="language-plaintext highlighter-rouge">createClient</code>
function, although not all clients require token caching. This results in different signatures for each <code class="language-plaintext highlighter-rouge">createClient</code>
function.</p>

<p>I’m considering using a Factory pattern for client creation. The plan is to unify or standardize the client creation
functions so they have a consistent signature, allowing us to replace them with a single Factory function that creates
clients based on configuration.</p>

<p>I discovered that <code class="language-plaintext highlighter-rouge">baseURL</code> is the only configuration that varies between clients so far. I’m unsure whether it’s best
to accept a configuration object or just <code class="language-plaintext highlighter-rouge">baseURL</code> as a parameter. I chose <code class="language-plaintext highlighter-rouge">baseURL</code>, as it’s easier to handle only when
needed than creating a configuration object with a single property.</p>

<p>Last week, I began refactoring the “PeelAPI” client and ended up with a <code class="language-plaintext highlighter-rouge">createClient(baseURL: string): AxiosInstance</code>
function, which returns an Axios instance with the correct configuration. I then moved on to “BunchAPI,” which was less
straightforward because, unlike “PeelAPI,” “BunchAPI” requires authentication. I had to extract the authentication logic
into a separate function. I didn’t change the signature of the <code class="language-plaintext highlighter-rouge">createClient</code> function, planning to address that in the
next merge request.</p>

<div class="tip">
  <p>Once standardized, Factory Pattern will take the wheel. But the question remains: what’s the cleanest way to handle authentication? 🤔 #CodeDesign</p>
</div>

<p>The first merge request is already merged, but I’m waiting for the second one to be reviewed. Once it’s merged, I will
standardize the <code class="language-plaintext highlighter-rouge">createClient</code> functions, ensuring that the first two API clients have a consistent signature. Then, the
third API client will be refactored in two steps: first to address authentication, then to standardize the signature.</p>

<p>After all <code class="language-plaintext highlighter-rouge">createClient</code> functions are standardized, I’ll create the Factory function to generate clients based on
configuration. I still need to determine a clean way to handle authentication. Do you have any suggestions?</p>]]></content><author><name>Dhemy</name></author><category term="dev-log" /><summary type="html"><![CDATA[I’m working on a Proxy/Adapter project, which we’ll call “Banana.” Banana is developed in TypeScript and uses Axios for HTTP requests. It’s designed to communicate with different APIs, each with distinct authentication methods and configurations.]]></summary></entry><entry><title type="html">Better alternatives to empty() in PHP</title><link href="https://imdhemy.com/blog/php/better-alternatives-to-empty-in-php.html/" rel="alternate" type="text/html" title="Better alternatives to empty() in PHP" /><published>2024-07-19T00:00:00+00:00</published><updated>2024-07-19T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/better-alternatives-to-empty-in-php</id><content type="html" xml:base="https://imdhemy.com/blog/php/better-alternatives-to-empty-in-php.html/"><![CDATA[<p>I’m working on a weekend project: a <a href="https://github.com/symblaze/mare-scan">static code analysis tool</a> for PHP, just
because, well, why not? So, I’ve been learning more about PHP’s internals and quirks. I used to use the <code class="language-plaintext highlighter-rouge">empty()</code>
function to check if a variable was empty, especially strings and arrays. But recently, I learned why using it can be a
bad idea. In this blog post, I’ll share why we should stop using <code class="language-plaintext highlighter-rouge">empty()</code> and look at better alternatives.</p>

<h2 id="what-does-empty-do">What does <code class="language-plaintext highlighter-rouge">empty()</code> do?</h2>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">empty</span><span class="p">(</span><span class="n">mixed</span> <span class="nv">$var</span><span class="p">)</span><span class="o">:</span> <span class="n">bool</span>
</code></pre></div></div>

<p>By checking the <a href="https://www.php.net/manual/en/function.empty.php">PHP manual</a>, you will find:</p>

<blockquote>
  <p>Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its
value equals false.</p>
</blockquote>

<p>Let’s have a look at the following examples:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">empty</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span> <span class="c1">// true</span>
<span class="k">empty</span><span class="p">(</span><span class="s1">''</span><span class="p">);</span> <span class="c1">// true</span>
<span class="k">empty</span><span class="p">([]);</span> <span class="c1">// true</span>
</code></pre></div></div>

<p>I used to think <code class="language-plaintext highlighter-rouge">empty()</code> always behaves like in these examples, but that’s not the reality!</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">empty</span><span class="p">(</span><span class="s1">'0'</span><span class="p">);</span> <span class="c1">// true (huh?) // Technically, '0' is not an empty string.</span>
<span class="k">empty</span><span class="p">(</span><span class="k">new</span> <span class="nc">ArrayObject</span><span class="p">());</span> <span class="c1">// false (Huh! It's already empty!)</span>
</code></pre></div></div>

<p>Surprise! <code class="language-plaintext highlighter-rouge">empty()</code> is doing a loose comparison with <code class="language-plaintext highlighter-rouge">false</code></p>

<table>
  <thead>
    <tr>
      <th><code class="language-plaintext highlighter-rouge">$value</code></th>
      <th><code class="language-plaintext highlighter-rouge">== false</code></th>
      <th><code class="language-plaintext highlighter-rouge">empty($value)</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">null</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">''</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[]</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><strong>Observe the following</strong></td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'0'</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">new ArrayObject()</code></td>
      <td>false</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<p>Not only that! But <code class="language-plaintext highlighter-rouge">empty()</code> also doesn’t throw a warning if the variable does not exist. That means <code class="language-plaintext highlighter-rouge">empty()</code> is
equivalent to <code class="language-plaintext highlighter-rouge">!isset($value) || $value == false</code>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">is_empty</span><span class="p">(</span><span class="nv">$value</span><span class="p">):</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$value</span> <span class="o">==</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In case you mistyped the variable name, your code will not complain about it.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$type</span> <span class="o">=</span> <span class="s1">'car'</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$typo</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Laterally THIS IS A TYPO</span>
    <span class="k">echo</span> <span class="s1">'This should not be printed'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The above code will print the message without any warnings or errors, even though the developer intended to check
the <code class="language-plaintext highlighter-rouge">type</code> variable length.</p>

<h2 id="better-alternatives-to-empty">Better alternatives to <code class="language-plaintext highlighter-rouge">empty()</code></h2>

<p>It depends on the context and the data type you are working with. Here are some alternatives:</p>

<h3 id="strings">Strings</h3>

<p>You can directly compare the string with an empty string.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="s1">''</span> <span class="o">===</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="arrays">Arrays</h3>

<p>You can compare with an empty array.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">([]</span> <span class="o">===</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Or you can use the <code class="language-plaintext highlighter-rouge">count()</code> function.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$value</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// Do something</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Comparing with an empty array is more readable than using the <code class="language-plaintext highlighter-rouge">count()</code> function. I wanted to be sure about the
performance difference between them, so I wrote a simple benchmark to compare how long it takes to execute each one on
an empty array and an array with <code class="language-plaintext highlighter-rouge">1000000</code> elements, and here are the results:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Empty Array Time (seconds)</th>
      <th>Large Array Time (seconds)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkWithCount</code></td>
      <td>0.21758413314819</td>
      <td>0.2175669670105</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkWithDirectComparison</code></td>
      <td>0.21403312683105</td>
      <td>0.21817898750305</td>
    </tr>
  </tbody>
</table>

<p>Based on these results, there is no significant performance difference between the two methods for both empty and large
arrays. However, from a code readability and directness perspective, using <code class="language-plaintext highlighter-rouge">if ([] === $value)</code> may still be preferred.</p>

<h2 id="more-thoughts">More thoughts</h2>

<p>Because <code class="language-plaintext highlighter-rouge">empty()</code> accepts any variable type, you may come across usages with Objects, integers and floats. I can’t
picture a developer will need to check if an integer value is empty, maybe they want to check if it’s zero. You got the
point! For that reason, I didn’t provide alternatives for these types.</p>

<p>The <code class="language-plaintext highlighter-rouge">empty()</code> is not working as expected with magic classes. I also omitted adding alternatives for them because we
should avoid using magic methods in the first place, but if you are interested, you can check the following:</p>

<p>Suppose we have a regular class:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">RegularClass</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nv">$property</span> <span class="o">=</span> <span class="s1">'value'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And another magic class with dynamic properties:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MagicClass</span> <span class="p">{</span>
   <span class="k">private</span> <span class="nv">$properties</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'property'</span> <span class="o">=&gt;</span> <span class="s1">'value'</span><span class="p">];</span>
   
    <span class="k">public</span> <span class="k">function</span> <span class="n">__get</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">properties</span><span class="p">[</span><span class="nv">$name</span><span class="p">]</span> <span class="o">??</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now let’s create an instance of each class and check if the property is empty:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$regular</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RegularClass</span><span class="p">();</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$regular</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">);</span> <span class="c1">// string(5) "value"</span>

<span class="nv">$magic</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MagicClass</span><span class="p">();</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$magic</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">);</span> <span class="c1">// string(5) "value"</span>

<span class="c1">// Now let's check if the property is empty</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$regular</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">));</span> <span class="c1">// false</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$magic</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">));</span> <span class="c1">// true (Huh!)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p><code class="language-plaintext highlighter-rouge">empty()</code> is not as straightforward as I thought. It’s better to avoid using it and use the alternatives I mentioned
above. It’s always better to be explicit in your code and avoid any surprises.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[I’m working on a weekend project: a static code analysis tool for PHP, just because, well, why not? So, I’ve been learning more about PHP’s internals and quirks. I used to use the empty() function to check if a variable was empty, especially strings and arrays. But recently, I learned why using it can be a bad idea. In this blog post, I’ll share why we should stop using empty() and look at better alternatives.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/desert.jpg" /><media:content medium="image" url="https://imdhemy.com/assets/img/desert.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Singleton Design Pattern in Laravel</title><link href="https://imdhemy.com/blog/php/singleton-design-pattern-in-laravel.html/" rel="alternate" type="text/html" title="Singleton Design Pattern in Laravel" /><published>2024-04-15T06:05:51+00:00</published><updated>2024-04-15T06:05:51+00:00</updated><id>https://imdhemy.com/blog/php/singleton-design-pattern-in-laravel</id><content type="html" xml:base="https://imdhemy.com/blog/php/singleton-design-pattern-in-laravel.html/"><![CDATA[<p>Google search console told me that I got some visits from people searching for “Singleton Design Pattern in Laravel”.
But they landed on my <a href="/blog/php/real-world-use-cases-of-sinlgeton-in-php.html/">PHP Real-world use cases of singleton design pattern</a> post. So I decided to make them happy with a dedicated post
about Singleton Design Pattern in Laravel.</p>

<p>In the mentioned post, I explained the Singleton Design Pattern in PHP, how to implement it, how to test it, and some
real-world use cases. If you are not familiar with this pattern, you can check it out.</p>

<h2 id="why-would-you-use-singleton-design-pattern">Why would you use Singleton Design Pattern?</h2>

<p>A perfect use case for the Singleton is a FileSystem class. You want to perform file operations in your application, and
you want to use the same instance of the FileSystem class everywhere in your application. It’s impossible to depend on
the constructors to get the same instance of the FileSystem, that’s where the Singleton Design Pattern comes in.</p>

<p>It may look unnecessary to use the Singleton Design pattern in PHP because each request is a new instance of the
application and all instances are destroyed after the request is done. But you get more benefits from it using it in
something like a Queue worker or a Laravel Octane server.</p>

<h2 id="some-laravel-binding-basics">Some Laravel Binding basics</h2>

<p>Before we create our Laravel Singleton, let’s understand some Laravel binding basics. The Laravel service container is a
powerful tool for managing class dependencies and performing dependency injection. Binding is the process of defining
how the container should resolve a class or an interface. Most of the time you don’t need to instruct the container how
to resolve your dependencies, but sometimes you do.</p>

<p>To bind a class into the container, you can use the <code class="language-plaintext highlighter-rouge">bind()</code> method inside one of the service providers. The following
example binds a <code class="language-plaintext highlighter-rouge">Foo</code> class. We can use the <code class="language-plaintext highlighter-rouge">\App\Providers\AppServiceProvider</code> for this.</p>

<p>Let’s assume we have a <code class="language-plaintext highlighter-rouge">Foo</code> class that can tell us when it was created.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="k">public</span> <span class="kt">int</span> <span class="nv">$createdAt</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can bind the <code class="language-plaintext highlighter-rouge">Foo</code> class to the container.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">App\Providers</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Foo</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Support\ServiceProvider</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">AppServiceProvider</span> <span class="kd">extends</span> <span class="nc">ServiceProvider</span>
<span class="p">{</span>
    <span class="cd">/**
     * Register any application services.
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">register</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">app</span><span class="o">-&gt;</span><span class="nf">bind</span><span class="p">(</span><span class="nc">Foo</span><span class="o">::</span><span class="n">class</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">time</span><span class="p">());</span>
        <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="c1">// .. other methods</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can resolve the <code class="language-plaintext highlighter-rouge">Foo</code> class from the container.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">use</span> <span class="nc">App\Foo</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Support\Facades\Route</span><span class="p">;</span>

<span class="nc">Route</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Foo</span> <span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="nv">$foo</span><span class="o">-&gt;</span><span class="n">createdAt</span><span class="p">;</span>
<span class="p">});</span>

</code></pre></div></div>

<p>Now if you visited your home page, you can see the timestamp when the <code class="language-plaintext highlighter-rouge">Foo</code> class was created, Something like this</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1713182568
</code></pre></div></div>

<h2 id="binding-a-singleton">Binding a Singleton</h2>

<p>The <code class="language-plaintext highlighter-rouge">singleton</code> method binds a class or interface into the container that should only be resolved one time. Once a
singleton binding is resolved, the same object instance will be returned on subsequent calls into the container. To see
it in action, let’s change our <code class="language-plaintext highlighter-rouge">Foo</code> example to a Singleton.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// app/Providers/AppServiceProvider.php
<span class="err">
</span>    public function register(): void
    {   
<span class="gd">-       $this-&gt;app-&gt;bind(Foo::class, function () {
</span><span class="gi">+       $this-&gt;app-&gt;singleton(Foo::class, function () {
</span>            return new Foo(time());
        });
    }
<span class="err">
</span></code></pre></div></div>

<p>Now, let’s create two instances of the <code class="language-plaintext highlighter-rouge">Foo</code> class in our route.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// routes/web.php</span>

<span class="kn">use</span> <span class="nc">App\Foo</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Support\Facades\Route</span><span class="p">;</span>

<span class="nc">Route</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="k">static</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nv">$firstCall</span> <span class="o">=</span> <span class="nf">app</span><span class="p">(</span><span class="nc">Foo</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

  <span class="c1">// Simulate a delay</span>
  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

  <span class="nv">$secondCall</span> <span class="o">=</span> <span class="nf">app</span><span class="p">(</span><span class="nc">Foo</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

  <span class="k">return</span> <span class="nf">response</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">json</span><span class="p">([</span>
        <span class="s1">'first_call'</span> <span class="o">=&gt;</span> <span class="nv">$firstCall</span><span class="o">-&gt;</span><span class="n">createdAt</span><span class="p">,</span>
        <span class="s1">'second_call'</span> <span class="o">=&gt;</span> <span class="nv">$secondCall</span><span class="o">-&gt;</span><span class="n">createdAt</span><span class="p">,</span>
        <span class="s1">'is_same_instance'</span> <span class="o">=&gt;</span> <span class="nv">$firstCall</span> <span class="o">===</span> <span class="nv">$secondCall</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The response should be something like this</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"first_call"</span><span class="p">:</span><span class="w"> </span><span class="mi">1713183052</span><span class="p">,</span><span class="w">
  </span><span class="nl">"second_call"</span><span class="p">:</span><span class="w"> </span><span class="mi">1713183052</span><span class="p">,</span><span class="w">
  </span><span class="nl">"is_same_instance"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>As you can see, the <code class="language-plaintext highlighter-rouge">first_call</code> and <code class="language-plaintext highlighter-rouge">second_call</code> are the same, and the <code class="language-plaintext highlighter-rouge">is_same_instance</code> is <code class="language-plaintext highlighter-rouge">true</code>. Try to replace
the <code class="language-plaintext highlighter-rouge">singleton</code> with <code class="language-plaintext highlighter-rouge">bind</code> and see the difference.</p>

<h2 id="two-types-of-singletons-binding-in-laravel">Two types of Singletons binding in Laravel</h2>

<p>We have already tried the <code class="language-plaintext highlighter-rouge">singleton()</code> method, but there is another way to bind a Singleton in Laravel. The Scoped
Bindings. The <code class="language-plaintext highlighter-rouge">scoped()</code> method binds a class or interface into the container that should only be resolved one time
within a given Laravel request / job lifecycle. While this method is similar to the singleton method, instances
registered using the scoped method will be flushed whenever the Laravel application starts a new “lifecycle”, such as
when a Laravel Octane worker processes a new request or when a Laravel queue worker processes a new job:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// app/Providers/AppServiceProvider.php
<span class="err">
</span>    public function register(): void
    {   
<span class="gd">-       $this-&gt;app-&gt;singleton(Foo::class, function () {
</span><span class="gi">+       $this-&gt;app-&gt;scoped(Foo::class, function () {
</span>            return new Foo(time());
        });
    }
<span class="err">
</span></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Laravel offers two types of Singleton bindings, the <code class="language-plaintext highlighter-rouge">singleton()</code> and the <code class="language-plaintext highlighter-rouge">scoped()</code>, each with its own use cases and
lifecycle.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Google search console told me that I got some visits from people searching for “Singleton Design Pattern in Laravel”. But they landed on my PHP Real-world use cases of singleton design pattern post. So I decided to make them happy with a dedicated post about Singleton Design Pattern in Laravel.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/stay_single.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/stay_single.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to avoid boilerplate code in Symfony Voters</title><link href="https://imdhemy.com/blog/php/how-to-avoid-boilerplate-code-in-symfony-voters.html/" rel="alternate" type="text/html" title="How to avoid boilerplate code in Symfony Voters" /><published>2024-04-03T00:00:00+00:00</published><updated>2024-04-03T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/how-to-avoid-boilerplate-code-in-symfony-voters</id><content type="html" xml:base="https://imdhemy.com/blog/php/how-to-avoid-boilerplate-code-in-symfony-voters.html/"><![CDATA[<p>Symfony voters are the way to go when you need to centralize the authorization logic of your application. There have
been multiple trials to improve the way we write voters, one of them was by introducing the <code class="language-plaintext highlighter-rouge">AbstractVoter</code> class in
<a href="https://symfony.com/blog/new-in-symfony-2-6-simpler-security-voters">Symfony 2.6</a>. Later on, it was deprecated in
<a href="https://symfony.com/blog/new-in-symfony-2-8-simpler-security-voters">Symfony 2.8</a> to be removed in v3.0 with the
introduction of the <code class="language-plaintext highlighter-rouge">Voter</code>class. The continuous improvement didn’t stop there, and I believe it will not.</p>

<p>In this post, I will contribute to the trials of improving the way we write voters by introducing the <code class="language-plaintext highlighter-rouge">CanDoVoter</code>.</p>

<h2 id="the-problem">The problem</h2>

<p>Suppose the logic to decide whether a user can <code class="language-plaintext highlighter-rouge">view</code> or <code class="language-plaintext highlighter-rouge">edit</code> a <code class="language-plaintext highlighter-rouge">Post</code> object is pretty complex. For example, a User
can always edit or view a Post they created. And if a Post is marked as “public”, anyone can view it. We can write
a <code class="language-plaintext highlighter-rouge">PostVoter</code> to handle this logic.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//src/Acme/Post/PostVoter.php</span>
<span class="kn">namespace</span> <span class="nn">App\Acme\Post</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Post</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">PostVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>   
    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="p">[</span><span class="s1">'get'</span><span class="p">,</span> <span class="s1">'update'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$subject</span> <span class="k">instanceof</span> <span class="nc">Post</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$user</span> <span class="k">instanceof</span> <span class="nc">User</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// This means if the user is not logged in, they can't view or edit the post</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$post</span> <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>
        <span class="nb">assert</span><span class="p">(</span><span class="nv">$post</span> <span class="k">instanceof</span> <span class="nc">Post</span><span class="p">);</span>
        
        <span class="c1">// The user can always edit or view a post they created</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$user</span> <span class="o">===</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">getAuthor</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="c1">// If the post is public, anyone can view it</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$attribute</span> <span class="o">===</span> <span class="s1">'get'</span> <span class="o">&amp;&amp;</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">isPublic</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="c1">// otherwise, the user can't view or edit the post</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, suppose we have another entity, <code class="language-plaintext highlighter-rouge">Comment</code>, and we need to write a <code class="language-plaintext highlighter-rouge">CommentVoter</code> to handle the logic of whether
a user can perform some actions on a <code class="language-plaintext highlighter-rouge">Comment</code> object. We will end up repeating a similar code in <code class="language-plaintext highlighter-rouge">supports()</code> and
the beginning of <code class="language-plaintext highlighter-rouge">voteOnAttribute()</code> methods till we get the <code class="language-plaintext highlighter-rouge">user</code> and <code class="language-plaintext highlighter-rouge">subject</code> objects.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//src/Acme/Comment/CommentVoter.php</span>

<span class="kn">namespace</span> <span class="nn">App\Acme\Comment</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Comment</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">CommentVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="p">[</span><span class="s1">'get'</span><span class="p">,</span> <span class="s1">'update'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$subject</span> <span class="k">instanceof</span> <span class="nc">Comment</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$user</span> <span class="k">instanceof</span> <span class="nc">User</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$comment</span> <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>

        <span class="c1">// Do the logic here</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="avoiding-the-repeated-code-in-the-supports">Avoiding the repeated code in the supports()</h2>

<p>The first step is to avoid the repeated code in the <code class="language-plaintext highlighter-rouge">supports()</code> method. The <code class="language-plaintext highlighter-rouge">supports()</code> method goal is to check if the
voter supports the given attribute and subject. We can extract them to configuration properties.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Foundation\Security</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CanDoVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>
    <span class="cd">/**
     * @var string[] the attributes that this voter supports
     */</span>
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$supportedAttributes</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="cd">/**
     * @var class-string the subject that this voter supports
     */</span>
    <span class="k">protected</span> <span class="kt">string</span> <span class="nv">$supportedClass</span><span class="p">;</span>
    
    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedAttributes</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">is_a</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedClass</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="avoiding-the-repeated-code-in-the-voteonattribute">Avoiding the repeated code in the voteOnAttribute()</h2>

<p>The <code class="language-plaintext highlighter-rouge">voteOnAttribute()</code> should perform the actual voting logic to decide whether the user can perform the given
attribute on the given subject. To do so, we need to get the <code class="language-plaintext highlighter-rouge">user</code> and <code class="language-plaintext highlighter-rouge">subject</code> objects. We can extract this code
as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Foundation\Security</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CanDoVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>
    <span class="c1">// The supports() method is removed for brevity</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$method</span> <span class="o">=</span> <span class="s1">'can'</span><span class="mf">.</span><span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">);</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$user</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$vote</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$method</span><span class="p">(</span><span class="nv">$user</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">);</span>
        <span class="nb">assert</span><span class="p">(</span><span class="nb">is_bool</span><span class="p">(</span><span class="nv">$vote</span><span class="p">));</span>

        <span class="k">return</span> <span class="nv">$vote</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Based on the <code class="language-plaintext highlighter-rouge">voteOnAttribute()</code> implementation, we need to define a method for each supported attribute. The method
name should be <code class="language-plaintext highlighter-rouge">can</code> followed by the attribute name with the first letter capitalized. For example, if the supported
attributes are <code class="language-plaintext highlighter-rouge">['get', 'update']</code>, we should define <code class="language-plaintext highlighter-rouge">canGet()</code> and <code class="language-plaintext highlighter-rouge">canUpdate()</code> methods. The <code class="language-plaintext highlighter-rouge">user</code> is passed as the
first argument, and the <code class="language-plaintext highlighter-rouge">subject</code> is passed as the second argument.</p>

<h2 id="introducing-the-candovoter">Introducing the CanDoVoter</h2>

<p>A final version of the <code class="language-plaintext highlighter-rouge">CanDoVoter</code> class is as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Foundation\Security</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CanDoVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>   
    <span class="k">public</span> <span class="k">const</span> <span class="no">LIST</span> <span class="o">=</span> <span class="s1">'list'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">GET</span> <span class="o">=</span> <span class="s1">'get'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">CREATE</span> <span class="o">=</span> <span class="s1">'create'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">UPDATE</span> <span class="o">=</span> <span class="s1">'update'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">DELETE</span> <span class="o">=</span> <span class="s1">'delete'</span><span class="p">;</span>
    
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$supportedAttributes</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">protected</span> <span class="kt">string</span> <span class="nv">$supportedClass</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedAttributes</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">is_a</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedClass</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$method</span> <span class="o">=</span> <span class="s1">'can'</span><span class="mf">.</span><span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">);</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$user</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$vote</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$method</span><span class="p">(</span><span class="nv">$user</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">);</span>
        <span class="nb">assert</span><span class="p">(</span><span class="nb">is_bool</span><span class="p">(</span><span class="nv">$vote</span><span class="p">));</span>

        <span class="k">return</span> <span class="nv">$vote</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="using-the-candovoter">Using the CanDoVoter</h2>

<p>Now, we can use the <code class="language-plaintext highlighter-rouge">CanDoVoter</code> to write the <code class="language-plaintext highlighter-rouge">PostVoter</code> as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Acme\Post</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Post</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Foundation\Security\CanDoVoter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">PostVoter</span> <span class="kd">extends</span> <span class="nc">CanDoVoter</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$supportedAttributes</span> <span class="o">=</span> <span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">GET</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">UPDATE</span><span class="p">];</span>
    <span class="k">protected</span> <span class="kt">string</span> <span class="nv">$supportedClass</span> <span class="o">=</span> <span class="nc">Post</span><span class="o">::</span><span class="n">class</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">canGet</span><span class="p">(</span><span class="kt">User</span> <span class="nv">$user</span><span class="p">,</span> <span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>   
        <span class="k">if</span> <span class="p">(</span><span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">isPublic</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span> <span class="o">===</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">getAuthor</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">canUpdate</span><span class="p">(</span><span class="kt">User</span> <span class="nv">$user</span><span class="p">,</span> <span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$user</span> <span class="o">===</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">getAuthor</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And in your controller, you can use the voter as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Controller</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Post</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Acme\Post\PostVoter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">PostController</span> <span class="kd">extends</span> <span class="nc">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">show</span><span class="p">(</span><span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">denyAccessUnlessGranted</span><span class="p">(</span><span class="nc">PostVoter</span><span class="o">::</span><span class="no">GET</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>
        
        <span class="c1">// The logic to show the post</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="n">update</span><span class="p">(</span><span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">denyAccessUnlessGranted</span><span class="p">(</span><span class="nc">PostVoter</span><span class="o">::</span><span class="no">UPDATE</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>
        
        <span class="c1">// The logic to update the post</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="testing-the-candovoter">Testing the canDoVoter</h2>

<p>We have discussed before <a href="/blog/testing/how-to-organize-your-unit-tests.html/">how to organize our unit tests</a>.
It’s a good practice to write unit tests that document your business logic, and testing the interface is the way to go.
That means you should write your tests against the <code class="language-plaintext highlighter-rouge">vote()</code> method not the <code class="language-plaintext highlighter-rouge">can*()</code> methods. The <code class="language-plaintext highlighter-rouge">can*()</code> methods
should be <code class="language-plaintext highlighter-rouge">protected</code> methods, and you should not test them directly.</p>

<div class="tip">

  <p>Always test the public interface of your classes. In this case, the public interface is the <code class="language-plaintext highlighter-rouge">vote()</code> method.</p>

</div>

<p>Below is an example of how to test the <code class="language-plaintext highlighter-rouge">PostVoter</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">final</span> <span class="kd">class</span> <span class="nc">PostVoterTest</span> <span class="kd">extends</span> <span class="nc">TestCase</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="k">function</span> <span class="n">any_user_can_view_a_public_post</span><span class="p">():</span> <span class="kt">void</span> 
   <span class="p">{</span>
       <span class="c1">// Arrange</span>
       <span class="nv">$post</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Post</span><span class="p">();</span>
       <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">setPublic</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
       <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="p">();</span>
       <span class="nv">$token</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">createMock</span><span class="p">(</span><span class="nc">TokenInterface</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>
       <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'getUser'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">willReturn</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
       <span class="nv">$sut</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PostVoter</span><span class="p">();</span>
       
       <span class="c1">// Act</span>
       <span class="nv">$actual</span> <span class="o">=</span> <span class="nv">$sut</span><span class="o">-&gt;</span><span class="nf">vote</span><span class="p">(</span><span class="nv">$token</span><span class="p">,</span> <span class="nv">$post</span><span class="p">,</span> <span class="p">[</span><span class="nc">PostVoter</span><span class="o">::</span><span class="no">GET</span><span class="p">]);</span>
       
       <span class="c1">// Assert</span>
       <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertEquals</span><span class="p">(</span><span class="nc">Voter</span><span class="o">::</span><span class="no">ACCESS_GRANTED</span><span class="p">,</span> <span class="nv">$actual</span><span class="p">);</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Avoid test names like: <code class="language-plaintext highlighter-rouge">it_should_fail_when_the_user_is_not_the_author()</code>. Instead, use test names that describe the
behavior of the system under test.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- it_should_fail_when_the_user_is_not_the_author()
</span><span class="err">
</span><span class="gi">+ only_the_author_can_update_the_post()
+ only_the_author_can_view_a_private_post()
+ any_user_can_view_a_public_post()
</span></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>You can have the <code class="language-plaintext highlighter-rouge">CanDoVoter</code> and much more out-of the box by using
the <a href="https://github.com/symblaze/security-bundle">Symblaze Security Bundle</a>.</p>

<p>In this post, we have introduced a new way to write Symfony voters with less boilerplate code, the <code class="language-plaintext highlighter-rouge">CanDoVoter</code>. The
<code class="language-plaintext highlighter-rouge">CanDoVoter</code> class is an abstract class that you can extend to write your voters. Improving the way we write voters
will make our codebase more maintainable and easier to read. I hope you find this post helpful, and I would love to
hear your feedback.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Symfony voters are the way to go when you need to centralize the authorization logic of your application. There have been multiple trials to improve the way we write voters, one of them was by introducing the AbstractVoter class in Symfony 2.6. Later on, it was deprecated in Symfony 2.8 to be removed in v3.0 with the introduction of the Voterclass. The continuous improvement didn’t stop there, and I believe it will not.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/vote.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/vote.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What Symfony developers should know before using Voters</title><link href="https://imdhemy.com/blog/php/what-symfony-developers-should-know-before-using-voters.html/" rel="alternate" type="text/html" title="What Symfony developers should know before using Voters" /><published>2024-04-02T00:00:00+00:00</published><updated>2024-04-02T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/what-symfony-developers-should-know-before-using-voters</id><content type="html" xml:base="https://imdhemy.com/blog/php/what-symfony-developers-should-know-before-using-voters.html/"><![CDATA[<p>Voters are Symfony’s most powerful way of managing permissions. They allow you to centralize all permission logic, then
reuse them in many places. In this post, We will cover some of the basics of Symfony’s security system that you
should know before using voters.</p>

<h2 id="permissions-should-be-linked-to-a-user">Permissions should be linked to a user</h2>

<p>In Symfony, permissions are always linked to a user object. If you need to secure parts of your application, you
need to create a user object that implements the <code class="language-plaintext highlighter-rouge">UserInterface</code>.</p>

<div class="tip">

  <p>Permissions should be linked to a user object. Always stick to this rule, even if you have an external user system</p>

</div>

<p>Some applications have an external SSO system that provides user information through an access token. Even in this case,
you should not depend directly on the access token to check permissions. Instead, you should create a user object that
implements the <code class="language-plaintext highlighter-rouge">UserInterface</code>. If you opt out of this approach, you will lose many benefits that you get from
Symfony’s security system.</p>

<h2 id="security-user-interface">Security User Interface</h2>

<p>The <code class="language-plaintext highlighter-rouge">UserInterface</code> provided by
the <a href="https://github.com/symfony/symfony/blob/923c4efa1df53e351aa52be1907191977cbf980f/src/Symfony/Component/Security/Core/User/UserInterface.php#L31">Symfony security component</a>
helps you to make sure that your user object has all the necessary methods to work with Symfony’s security system
regardless of how you load or create the user object, e.g., from a database, an API, or a Token.</p>

<div class="tip">

  <p>The security user interface is the contract between your user object and Symfony’s security system.</p>

</div>

<p>Let’s take a look at the <code class="language-plaintext highlighter-rouge">UserInterface</code>:</p>

<p>The first method is <code class="language-plaintext highlighter-rouge">getRoles()</code>. The name of the method is self-explanatory, it should return an array of roles for the
user. We will cover roles in the next section.</p>

<p>The second method is <code class="language-plaintext highlighter-rouge">eraseCredentials()</code>. This method is designed to clear any sensitive data that the user object
might be holding at any given point. For instance, clearing the plain text password after the user is authenticated.</p>

<p>The last method is <code class="language-plaintext highlighter-rouge">getUserIdentifier()</code>. This method should return the <strong>Public representation</strong> of a user e.g.,
the <code class="language-plaintext highlighter-rouge">username</code>. This method can be used by the user providers which helps you to get many benefits, like <a href="https://symfony.com/doc/current/security.html#fetching-the-user-from-a-service">fetching
the user object in your
service</a>, <a href="https://symfony.com/doc/current/security/impersonating_user.html">impersonating a user</a>,
etc.</p>

<h2 id="user-roles">User Roles</h2>

<p>When a user is authenticated, Symfony calls the <code class="language-plaintext highlighter-rouge">getRoles()</code> method on the user object to determine the roles of the
user. It doesn’t matter how the roles are stored in the database or how they are generated. The only thing that matters
is that every role must start with the <code class="language-plaintext highlighter-rouge">ROLE_</code> prefix - otherwise, things won’t work as expected. You will use these
roles to grant access to specific parts of your application.</p>

<div class="tip">

  <p>All roles should start with the <code class="language-plaintext highlighter-rouge">ROLE_</code> prefix. This is a requirement of Symfony’s security system.</p>

</div>

<p>Symfony provides a role hierarchy system out of the box. Instead of assigning multiple roles to a user, you can
configure a role hierarchy. This way, you can assign a single role to a user, and Symfony will automatically grant
access to all the roles in the hierarchy.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/packages/security.yaml</span>
<span class="na">security</span><span class="pi">:</span>
  <span class="c1"># ...</span>

  <span class="na">role_hierarchy</span><span class="pi">:</span>
    <span class="na">ROLE_MODERATOR</span><span class="pi">:</span> <span class="s">ROLE_USER</span>
    <span class="na">ROLE_ADMIN</span><span class="pi">:</span> <span class="s">ROLE_MODERATOR</span>
    <span class="na">ROLE_SUPER_ADMIN</span><span class="pi">:</span> <span class="s">ROLE_ADMIN</span>

</code></pre></div></div>

<p>Using the above configuration, if a user has the <code class="language-plaintext highlighter-rouge">ROLE_SUPER_ADMIN</code> role, Symfony will automatically grant access to
<code class="language-plaintext highlighter-rouge">ROLE_ADMIN</code>, <code class="language-plaintext highlighter-rouge">ROLE_MODERATOR</code>, and <code class="language-plaintext highlighter-rouge">ROLE_USER</code>. This is illustrated as follows:</p>

<p>The <code class="language-plaintext highlighter-rouge">ROLE_SUPER_ADMIN</code> role inherits the <code class="language-plaintext highlighter-rouge">ROLE_ADMIN</code> role, which inherits the <code class="language-plaintext highlighter-rouge">ROLE_MODERATOR</code> role, which inherits
the <code class="language-plaintext highlighter-rouge">ROLE_USER</code> role. It’s worth noting that a role can inherit multiple roles.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/packages/security.yaml</span>
<span class="na">security</span><span class="pi">:</span>
  <span class="c1"># ...</span>

  <span class="na">role_hierarchy</span><span class="pi">:</span>
    <span class="na">ROLE_ADMIN</span><span class="pi">:</span> <span class="s">ROLE_USER</span>
    <span class="na">ROLE_SUPER_ADMIN</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">ROLE_ADMIN</span><span class="pi">,</span> <span class="nv">ROLE_ALLOWED_TO_SWITCH</span> <span class="pi">]</span>
</code></pre></div></div>

<p>For role hierarchy to work, do not use <code class="language-plaintext highlighter-rouge">$user-&gt;getRoles()</code> manually, instead you should always depend on the
<code class="language-plaintext highlighter-rouge">isGranted()</code> or <code class="language-plaintext highlighter-rouge">denyAccessUnlessGranted()</code> methods provided by the <code class="language-plaintext highlighter-rouge">AuthorizationCheckerInterface</code>.</p>

<div class="tip">

  <p>Let symfony does the heavy lifting for you. Always use the security methods to check for roles.</p>

</div>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// BAD - $user-&gt;getRoles() will not know about the role hierarchy
<span class="gd">- $hasAccess = in_array('ROLE_ADMIN', $user-&gt;getRoles());
</span><span class="err">
</span>// GOOD - use of the normal security methods
<span class="gi">+ $hasAccess = $this-&gt;isGranted('ROLE_ADMIN');
+ $this-&gt;denyAccessUnlessGranted('ROLE_ADMIN');
</span><span class="err">
</span></code></pre></div></div>

<h2 id="decision-strategy">Decision Strategy</h2>

<p>When you start using voters, Symfony will ask each voter to vote on the access decision. There are three decisions
that a voter can make, like any other voting system:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code>: The voter grants access to the resource.</li>
  <li><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code>: The voter denies access to the resource.</li>
  <li><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code>: The voter abstains from voting.</li>
</ol>

<p>Normally, only one voter will vote at any given time, and all the rest will <code class="language-plaintext highlighter-rouge">abstain</code>. However, if you want to
change this behavior, you need to know about the <code class="language-plaintext highlighter-rouge">decision_strategy</code> configuration.</p>

<div class="tip">
  <p>It’s always good to keep the default <code class="language-plaintext highlighter-rouge">decision_strategy</code> and design your voters accordingly. A resource oriented
voter should only vote on the resource it is designed for.</p>
</div>

<p>Suppose you have a feature that requires a user to be part of a group and is older than 18 years. You have two separate
voters to check these conditions. The following table will help you understand different decision strategies:</p>

<table>
  <thead>
    <tr>
      <th>Decision Strategy</th>
      <th>Description</th>
      <th>Voter 1</th>
      <th>Voter 2</th>
      <th>Voter 3</th>
      <th>Result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>affirmative (default)</td>
      <td>This grants access as soon as there is one voter granting access</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
    </tr>
    <tr>
      <td>consensus</td>
      <td>This grants access if there are more voters granting access than denying. In case of a tie the decision is based on the allow_if_equal_granted_denied config option (defaulting to true);</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
    </tr>
    <tr>
      <td>unanimous</td>
      <td>This only grants access if there is no voter denying access.</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
    </tr>
    <tr>
      <td>priority</td>
      <td>This grants or denies access by the first voter that does not abstain, based on their service priority</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
    </tr>
  </tbody>
</table>

<p>Back to our example, if you want to grant access only if both voters grant access, you should use the <code class="language-plaintext highlighter-rouge">unanimous</code>
decision strategy.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/packages/security.yaml</span>
<span class="na">security</span><span class="pi">:</span>
  <span class="na">access_decision_manager</span><span class="pi">:</span>
    <span class="na">strategy</span><span class="pi">:</span> <span class="s">unanimous</span>
    <span class="na">allow_if_all_abstain</span><span class="pi">:</span> <span class="kc">false</span>
</code></pre></div></div>

<h2 id="summary">Summary</h2>

<p>In this post, we covered some of the basics of Symfony’s security system that you should know before using voters.
understanding them will help you make the most out of Symfony’s security system. You should always consult the Symfony
documentation for the most up-to-date information and best practices. In the next article, we will cover how to create
a custom voter and how to use it in your application.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Voters are Symfony’s most powerful way of managing permissions. They allow you to centralize all permission logic, then reuse them in many places. In this post, We will cover some of the basics of Symfony’s security system that you should know before using voters.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/voting.webp" /><media:content medium="image" url="https://imdhemy.com/assets/img/voting.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The pipeline ate my code</title><link href="https://imdhemy.com/blog/generic/the-pipeline-ate-my-code.html/" rel="alternate" type="text/html" title="The pipeline ate my code" /><published>2024-03-30T00:00:00+00:00</published><updated>2024-03-30T00:00:00+00:00</updated><id>https://imdhemy.com/blog/generic/the-pipeline-ate-my-code</id><content type="html" xml:base="https://imdhemy.com/blog/generic/the-pipeline-ate-my-code.html/"><![CDATA[<p>I’m your teammate developer, and I’m here to tell you how my CI/CD pipelines aren’t like other pipelines. They are
always green, and they never fail. They can even fix my code before I push it to the repository. 🤯 Isn’t that cool? I’m
kidding, of course. My pipelines are just like yours. They fail, and they fail a lot.</p>

<p>Imagine working with a team member who exudes confidence at every turn, is self-centered, and repeatedly stumbles over
the simplest tasks. Welcome to the puzzling world of the <strong>Dunning-Kruger Effect</strong> <em>where the less you know, the more
you think you know, leaving you with a false sense of confidence.</em> This does not only affect your ability to learn and
grow, but it also affects the team’s productivity and morale leaving behind a trail of stressed-out and unsatisfied team
members.</p>

<p>In this article, we’ll shine a light on the challenges posed by such colleagues and explore strategies for mitigating
their impact on team productivity and morale.</p>

<h2 id="understanding-the-dunning-kruger-effect">Understanding the Dunning-Kruger Effect</h2>

<p>Let’s start by understanding
the <a href="https://www.semanticscholar.
org/paper/Unskilled-and-unaware-of-it%3A-how-difficulties-in-to-Kruger-Dunning
/f2c80eef3585e0569e93ace0b9770cf76c8ebabc?p2df">Dunning-Kruger Effect</a>. Imagine you are learning to play a musical instrument, and in your
mind, you are the next Beethoven. The reality? You sound more like a cat walking on a piano.</p>

<p>That’s the Dunning-Kruger Effect in action. It’s the tendency of individuals with limited knowledge or skills to
over-inflate their own abilities. They are unable to recognize their incompetence, leading them to believe they are
better than they actually are.</p>

<p>When you are in the presence of a colleague who is a victim of the Dunning-Kruger Effect, you might notice the following
traits:</p>

<ol>
  <li><strong>Inability to accept feedback</strong>: They are resistant to feedback and often dismiss it.</li>
  <li><strong>Lack of self-awareness</strong>: They are unable to recognize their own incompetence.</li>
  <li><strong>Inability to collaborate</strong>: They are unable to work effectively with others.</li>
  <li><strong>Inability to take responsibility</strong>: They are unable to take responsibility for their actions.</li>
  <li><strong>Inability to adapt</strong>: They are unable to adapt to new situations.</li>
  <li><strong>Inability to communicate</strong>: They are unable to communicate effectively.</li>
</ol>

<p>Responsibility isn’t just about ticking off boxes on a to-do list—it’s about understanding the bigger picture and how
your role fits into the grand scheme of things. It’s about being accountable for your actions and the impact they have
on the team’s success. In a software development setting, this means knowing your tasks inside out, collaborating
effectively with your peers, and owning up to your mistakes when things don’t go as planned. After all, a chain is only
as strong as its weakest link, and in a team environment, everyone’s contribution matters.</p>

<h2 id="impact-on-team-dynamics">Impact on Team Dynamics</h2>

<p>The Dunning-Kruger Effect can have a significant impact on team dynamics. When a team member is blinded by their
overconfidence, taking over tasks she is not qualified for without regard for collaboration nor feedback. This
misplaced confidence not only hinders her progress but also creates a friction within the team. Others are left
picking up the pieces, feeling frustrated and demotivated by the lack of accountability and miss-communication.</p>

<p>In a team environment, trust and collaboration are the cornerstones of success. When one team member fails to pull their
weight, it creates a ripple effect that can lead to missed deadlines, poor-quality work, and strained relationships.
The result? A fractured team struggling to stay afloat in a sea of discord.</p>

<h2 id="navigating-stress-and-frustration">Navigating Stress and Frustration</h2>

<p>As we come face to face with the challenges posed by the Dunning-Kruger team member, it’s essential to raise
awareness about the cost it takes on individual stress level. Being in a constant state of frustration, trying to
navigate the maze of misplaced confidence and lack of accountability, can take a toll on one’s mental health and
well-being. Their refusal to accept feedback and collaborate effectively can lead to a toxic work environment where
team members feel undervalued and unappreciated.</p>

<p>Navigating stress and frustration in such an environment requires patience, resilience, and a healthy dose of
self-care. Take a step back, breathe, and remind yourself that you’re doing the best you can in a challenging situation.
Seek support from trusted colleagues and mentors, and don’t hesitate to communicate your concerns with your team leader.
Together, we can weather the storm and emerge stronger on the other side.</p>

<p>It’s not that easy to talk openly about such issues, but it’s essential to address them before they escalate. It’s
the responsibility of the team leader to create a safe space where team members can voice their concerns without fear of
being judged or dismissed. The open and honest communication is the key to resolving conflicts.</p>

<h2 id="promoting-self-awareness-and-accountability">Promoting Self-Awareness and Accountability</h2>

<p>It’s important to promote self-awareness and accountability within the team. One of the effective ways for doing so is
encourage regular self-reflection. Encourage team members to take a step back and evaluate their performance
objectively, identifying areas for improvement and acknowledging their own shortcomings.</p>

<p>Additionally, it’s essential to foster a culture of open feedback and constructive criticism. This will help team
members to recognize the blind spots and work towards addressing them.</p>

<p>Accountability goes hand in hand with self-awareness. It’s about taking ownership of one’s actions and their impact on
the team’s success. Encourage team members to take responsibility for their mistakes and learn from them. This will not
only help them grow professionally but also foster a sense of trust and collaboration within the team. By fostering a
culture of transparency and accountability, we create an environment where continuous learning and improvement thrive.</p>

<h2 id="addressing-the-root-cause">Addressing the Root Cause</h2>

<p>Digging beneath the surface, uncovering the deep-rooted causes of this behavior is crucial to examine what give rise to
the Dunning-Kruger Effect within the team. Is it a lack of training and development opportunities? Is it a lack of
feedback and mentorship? Is it a lack of recognition and appreciation? By identifying the underlying causes, we can take
proactive steps to address them and create a supportive work environment where team
members can thrive.</p>

<h2 id="creating-a-supportive-work-environment">Creating a Supportive Work Environment</h2>

<p>Sometimes, our empathy towards our colleagues who are struggling with the Dunning-Kruger Effect or any other challenges
can affect our responsibility towards the other team members who are affected by their behavior. It’s essential to
strike a balance between empathy and accountability. Supportive work environment is not meant only for those who are
misplacing their confidence but also for those who are affected by their behavior.</p>

<p>On the other hand, embracing a culture of humility and continuous learning can help mitigate the issue. This
means recognizing that we all have areas where we can improve and that seeking assistance is not a sign of weakness, but
rather a demonstration of self-awareness and maturity. In a supportive work environment, team members are empowered to
share their challenges openly, knowing that their colleagues will offer support and guidance without judgment.</p>

<h2 id="conclusion-balancing-empathy-and-accountability">Conclusion: Balancing Empathy and Accountability</h2>

<p>In the dynamic landscape of software development, navigating the challenges posed by the Dunning-Kruger Effect
requires a delicate balance of empathy, accountability, and continuous learning. By fostering a supportive work
environment where humility, openness, and collaboration are championed, we can mitigate the impact of overconfidence,
empower team members to thrive, and build stronger, more resilient teams capable of overcoming any obstacle.</p>

<p>Helping a team member who struggles does not mean to forget about the other team members, they also need your support.
It’s about striking a balance between empathy and accountability.</p>]]></content><author><name>Dhemy</name></author><category term="generic" /><summary type="html"><![CDATA[I’m your teammate developer, and I’m here to tell you how my CI/CD pipelines aren’t like other pipelines. They are always green, and they never fail. They can even fix my code before I push it to the repository. 🤯 Isn’t that cool? I’m kidding, of course. My pipelines are just like yours. They fail, and they fail a lot.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/plumbers.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/plumbers.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Effective Node.js Modules - Part 2: ESM dynamic imports</title><link href="https://imdhemy.com/blog/nodejs/esm-dynamic-imports.html/" rel="alternate" type="text/html" title="Effective Node.js Modules - Part 2: ESM dynamic imports" /><published>2024-03-25T00:00:00+00:00</published><updated>2024-03-25T00:00:00+00:00</updated><id>https://imdhemy.com/blog/nodejs/esm-dynamic-imports</id><content type="html" xml:base="https://imdhemy.com/blog/nodejs/esm-dynamic-imports.html/"><![CDATA[<p>One of the main differences between CJS and ESM modules is the way they handle dynamic imports. In CJS you can use
<code class="language-plaintext highlighter-rouge">require</code> to import modules anywhere in your code, but in ESM you can only use <code class="language-plaintext highlighter-rouge">import</code> at the top level of your code.
What if you want to import a module dynamically in ESM?</p>

<p>In this post, we will create a simple <code class="language-plaintext highlighter-rouge">Hello world!</code> application that uses dynamic imports to greet the user in
different languages. If you don’t know how to enable ESM in Node.js, check the
<a href="/blog/nodejs/effective-nodejs-modules-part-1.html/">previous post</a>.</p>

<p>Below is the directory structure of our application:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── main.js
├── package.json
└── translations
    ├── ar.js
    ├── de.js
    └── en.js
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">translations</code> directory contains three files: <code class="language-plaintext highlighter-rouge">en.js</code>, <code class="language-plaintext highlighter-rouge">de.js</code>, and <code class="language-plaintext highlighter-rouge">ar.js</code>. Each file exports constants that
represent the greeting message in a specific language. Here are the contents of the files:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// translations/en.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">GREETING</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello world!</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// translations/ar.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">GREETING</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">مرحبا بالعالم!</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// translations/de.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">GREETING</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hallo Welt!</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">main.js</code> file is the entry point of our application. It gets the user’s preferred language from the command
line then imports the corresponding translation module dynamically if it exists.</p>

<p>Here is the content of the <code class="language-plaintext highlighter-rouge">main.js</code> file:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">de</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">ar</span><span class="dl">'</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">defaultLanguage</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">language</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="nx">defaultLanguage</span><span class="p">;</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">languages</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">language</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="s2">`Unsupported language: </span><span class="p">${</span><span class="nx">language</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">process</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Get advantage of top-level await</span>
<span class="kd">const</span> <span class="p">{</span><span class="nx">GREETING</span><span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="k">import</span><span class="p">(</span><span class="s2">`./translations/</span><span class="p">${</span><span class="nx">language</span><span class="p">}</span><span class="s2">.js`</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">GREETING</span><span class="p">);</span>
</code></pre></div></div>

<p>To run the application, execute the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node main.js de
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">main.js</code> we used the <code class="language-plaintext highlighter-rouge">import()</code> expression, commonly called dynamic import. This expression will be evaluated
at runtime, and the module will be loaded asynchronously. The <code class="language-plaintext highlighter-rouge">await</code> keyword is used to wait for the module to be
loaded before continuing the execution.</p>

<div class="tip">
  <p>Use dynamic import only when necessary. The static form is preferable for loading initial dependencies, and can benefit more readily from static analysis tools and tree shaking.</p>
</div>

<p>That’s it! You have learned how to use dynamic imports in ESM modules.</p>]]></content><author><name>Dhemy</name></author><category term="nodejs" /><summary type="html"><![CDATA[One of the main differences between CJS and ESM modules is the way they handle dynamic imports. In CJS you can use require to import modules anywhere in your code, but in ESM you can only use import at the top level of your code. What if you want to import a module dynamically in ESM?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/dog-running.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/dog-running.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>