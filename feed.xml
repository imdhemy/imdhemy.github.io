<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://imdhemy.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://imdhemy.com/" rel="alternate" type="text/html" /><updated>2024-01-14T09:57:14+00:00</updated><id>https://imdhemy.com/feed.xml</id><title type="html">Imdhemy</title><subtitle>I&apos;m a software artist, fullstack (BE heavy) with 10+ years of experience in software development. 
Passionate about open source, blogging, and reading.
</subtitle><author><name>Dhemy</name></author><entry><title type="html">Effective Node.js Modules - Part 1: Basic Syntax</title><link href="https://imdhemy.com/blog/nodejs/effective-nodejs-modules-part-1.html" rel="alternate" type="text/html" title="Effective Node.js Modules - Part 1: Basic Syntax" /><published>2024-01-07T00:00:00+00:00</published><updated>2024-01-07T00:00:00+00:00</updated><id>https://imdhemy.com/blog/nodejs/effective-nodejs-modules-part-1</id><content type="html" xml:base="https://imdhemy.com/blog/nodejs/effective-nodejs-modules-part-1.html"><![CDATA[<p>Do you know what is the difference between the following two code snippets?</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">connection</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>And this one:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">connection</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./config.js</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Both of them import the <code class="language-plaintext highlighter-rouge">app</code> and <code class="language-plaintext highlighter-rouge">connection</code> from the <code class="language-plaintext highlighter-rouge">config</code> module, but the first one is using the <strong>CommonJS</strong> (
CJS) module system, and the second one is using the <strong>ECMAScript</strong> (ES) module system.</p>

<p>Modules allow you to split your code into small units, that can be reused and tested independently. They are also the
main way to enforce information hiding by exposing (exporting) only the public API of the module.</p>

<p>In this series of posts, we will talk about how to use modules effectively in your Node.js applications. By the end of
this series, you should be able to make pragmatic decisions about how to use modules effectively in your Node.js
applications.</p>

<table>
  <thead>
    <tr>
      <th>📋</th>
      <th>Posts in this series</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Basic Syntax</td>
    </tr>
    <tr>
      <td>2</td>
      <td>…</td>
    </tr>
  </tbody>
</table>

<p>Javascript was introduced in 1995 as a scripting language for browsers. It was not designed to be used as a server
language. Browsers should keep an eye on the security of the user and the system, so they need to limit the access of
the Javascript code to the system resources. The nature of the Javascript and the browser environment allowed the use
of the <code class="language-plaintext highlighter-rouge">script</code> tag to load Javascript code didn’t help the developers to write modular code. Developers used multiple <code class="language-plaintext highlighter-rouge">script</code>
tags to load the Javascript code in the right order.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"foo.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"bar.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"baz.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>When Node.js was introduced in 2009 as a server-side Javascript runtime, it came with full access to the underlying
system resources. This allowed providing the CommonJS module system to allow developers to write modular code and
organize their applications into small reusable units.</p>

<h3 id="cjs-commonjs-module-system">CJS: CommonJS module system</h3>

<p>The CJS module system is the default module system of Node.js. <strong>CJS</strong> uses <code class="language-plaintext highlighter-rouge">require</code> to import modules
and <code class="language-plaintext highlighter-rouge">module.exports</code>or <code class="language-plaintext highlighter-rouge">exports</code> to export modules. <code class="language-plaintext highlighter-rouge">exports</code> is a reference to <code class="language-plaintext highlighter-rouge">module.exports</code>, so you can use either
of them to export modules as follows:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Awesome App</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Is the same as:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// config.js</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Awesome App</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">require</code> function returns the exported value of the module.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config.js</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="c1">// { app: { name: 'Awesome App', port: 3000 } }</span>
</code></pre></div></div>

<p>You can also use the <code class="language-plaintext highlighter-rouge">require</code> function to import a single module from a file that exports multiple modules.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Awesome App</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">connection</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">host</span><span class="p">:</span> <span class="dl">'</span><span class="s1">localhost</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">27017</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">connection</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config.js</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">connection</span><span class="p">)</span> <span class="c1">// { host: 'localhost', port: 27017 }</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="c1">// ReferenceError: app is not defined</span>
</code></pre></div></div>

<p>The CJS allows you to conditionally import modules using the <code class="language-plaintext highlighter-rouge">require</code> function. This is useful when you want to load
modules based on a specific condition.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">let</span> <span class="nx">logger</span>
<span class="k">if </span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">app</span><span class="p">.</span><span class="nx">env</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">logger</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./silent-logger</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">logger</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./logger</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="esm-ecmascript-module-system">ESM: ECMAScript module system</h3>

<div class="tip">
   <p>
If you want to use ESM modules, you need to set the "type" to module "module" in the package.json file. Or name your files with the ".mjs" extension.
</p>
</div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// package.json</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ECMAScript modules (ESM) are the standard official module system of Javascript. It was introduced in 2015 as part of
the ES6 specification. It was introduced with the goal of narrowing the gap between the browser and the server when
it comes to the module system. It was added to Node.js on <code class="language-plaintext highlighter-rouge">v8.5.0</code> as an experimental feature. By <code class="language-plaintext highlighter-rouge">v13.2.0</code>, loading
ESM modules became available without any command-line flags.</p>

<p>ESM uses <code class="language-plaintext highlighter-rouge">export</code> to export modules and <code class="language-plaintext highlighter-rouge">import</code> to import modules.</p>

<div class="tip">
    <p>ESM uses `export` in the singular format not `exports` like CJS.</p>
</div>

<p>The following example shows how to export a function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// sum.mjs</span>
<span class="kd">function</span> <span class="nf">sum</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">sum</span> <span class="p">}</span>
</code></pre></div></div>

<p>The following example shows how to import that function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">sum</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./sum.mjs</span><span class="dl">'</span> <span class="c1">// File extension is required to import relative modules</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span> <span class="c1">// 16</span>
</code></pre></div></div>

<p>You can also export a default module using the <code class="language-plaintext highlighter-rouge">export default</code> syntax. This is useful when you want to export a single
module from a file. Exporting a default module doesn’t prevent you from exporting other modules from the same file.</p>

<p>The following example shows how to export a default module:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// sum.mjs</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">sum</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The following example shows how to import that function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>
<span class="k">import</span> <span class="nx">sum</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./sum.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span> <span class="c1">// 16</span>
</code></pre></div></div>

<p>The following example shows a mixed export of a default module and other modules:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// calculator.mjs</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">sum</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">subtract</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">calculate</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// a magic function that takes a string input like "1 + 2" and returns the result</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you imported the default module, then you have access to the <code class="language-plaintext highlighter-rouge">calculate</code> function which is the default export of
the module. You can also give it any name you want.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">myCalculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">myCalculator</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>

<span class="nx">myCalculator</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// TypeError: myCalculator.sum is not a function</span>
</code></pre></div></div>

<p>If you imported the module using the <code class="language-plaintext highlighter-rouge">import * as</code> syntax, then you have access to all the exported modules. The <code class="language-plaintext highlighter-rouge">import * as</code>
imports all the exported modules in a single object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">calculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// -1</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="k">default</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>As you already noticed, using something like <code class="language-plaintext highlighter-rouge">calculator.default</code> is not very convenient. You can get the same
result by the following readable syntax:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">calculate</span><span class="p">,</span> <span class="p">{</span> <span class="nx">sum</span><span class="p">,</span> <span class="nx">subtract</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// -1</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">calculate</code> is our custom name for the default export of the module, the other modules are imported using their
original names. You can also use the <code class="language-plaintext highlighter-rouge">as</code> keyword to rename the imported modules.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">calculate</span><span class="p">,</span> <span class="p">{</span> <span class="nx">sum</span> <span class="k">as</span> <span class="nx">add</span><span class="p">,</span> <span class="nx">subtract</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// -1</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>The ESM modules doesn’t support conditionally importing modules. All the imports should be at the top of the file.</p>

<div class="danger">
    <p>The following code will throw a SyntaxError: </p>
</div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">config</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./config.mjs</span><span class="dl">'</span>

<span class="k">if </span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">app</span><span class="p">.</span><span class="nx">env</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">import</span> <span class="nx">logger</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./silent-logger.mjs</span><span class="dl">'</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">import</span> <span class="nx">logger</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./logger.mjs</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="summary">Summary</h2>

<p>In this post, we talked about the basic syntax of the CJS and ESM modules. We talked about how to import and export
modules using both module systems. We didn’t cover all the details, but we covered the basics that you need to know to
differentiate between the two module systems.</p>

<p><sub>
Image: <a href="https://unsplash.com/photos/a-dog-lays-on-a-bed-next-to-a-laptop-IGfoMhQhtwo">Photo by Jorge Rosal on Unsplash</a></sub></p>]]></content><author><name>Dhemy</name></author><category term="nodejs" /><summary type="html"><![CDATA[Do you know what is the difference between the following two code snippets?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/dog-laptop-code-bed.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/dog-laptop-code-bed.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">From Code to German: My First Steps Towards Learning a New Language</title><link href="https://imdhemy.com/blog/germany/from-code-to-german.html" rel="alternate" type="text/html" title="From Code to German: My First Steps Towards Learning a New Language" /><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><id>https://imdhemy.com/blog/germany/from-code-to-german</id><content type="html" xml:base="https://imdhemy.com/blog/germany/from-code-to-german.html"><![CDATA[<p>For years, I have been dedicated to writing code every day and contributing to various
projects. <a href="https://github.com/imdhemy">My GitHub account</a> showcases my commitment and hard work. Since I moved
from Egypt to Frankfurt am Main, Germany, I’ve decided to do the same with learning German, but Unfortunately, I
couldn’t keep doing both at the same time. I had to choose one of them, and I decided to take a break from coding and
focus on learning the German language. It’s not a complete break, though. I will still be contributing to open source
projects, and I’m writing code every day in my job, But I mean a break from that habit of writing code every day for
open source projects.</p>

<p>As an expat in a foreign country, learning the local language is vital not only for practical purposes but also for
understanding the culture better. I have tried learning a new language in the past, particularly Turkish, but I failed
to do so. However, I have faith that German is different, and my background in English, which has some similarities with
German, may give me an edge.</p>

<p>To begin my language learning journey, I set a goal to finish one lesson per week from
the <a href="https://www.hueber.de/menschen">Menschen book</a>, a popular German language textbook for adults and young adults
designed according to the latest findings in educational psychology as they describe it.</p>

<p>I already tried some applications like Duolingo and Babbel, but I didn’t like them. I prefer a more structured approach
to learning a new language. I want to learn the language in a way similar to how I learned English which I learned from
the “Hello” series of books.</p>

<p>I’ve just completed my first lesson, and it feels like a great accomplishment. The first lesson introduced me to the
basics of the German language, such as the alphabet, how to ask about names, how say “how are you” and so on.</p>

<p>In addition to the book, I planned to practice speaking German for 10 minutes every day. My first attempt was
challenging, I couldn’t pronounce correctly, and I was quite nervous. I’m not sure if I will be able to do it every day,
but I will try my best.</p>

<p>Learning a new language is challenging, and I’ve already encountered some difficulties, particularly with the
pronunciation of some German words. However, I’m optimistic that with persistence and hard work, I’ll be able to master
the language.</p>

<p>In conclusion, I believe that taking the first step towards learning a new language is always the hardest, but it’s also
the most important. If you’re thinking of learning a new language, don’t be afraid to start, even if it’s just for ten
minutes a day. You’ll be amazed at how much progress you can make with consistent effort. Believe me, I did the same
with coding, and I gained a lot of experience and knowledge. Hopefully, I’ll be able to do the same with German.</p>]]></content><author><name>Dhemy</name></author><category term="germany" /><summary type="html"><![CDATA[For years, I have been dedicated to writing code every day and contributing to various projects. My GitHub account showcases my commitment and hard work. Since I moved from Egypt to Frankfurt am Main, Germany, I’ve decided to do the same with learning German, but Unfortunately, I couldn’t keep doing both at the same time. I had to choose one of them, and I decided to take a break from coding and focus on learning the German language. It’s not a complete break, though. I will still be contributing to open source projects, and I’m writing code every day in my job, But I mean a break from that habit of writing code every day for open source projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/frankfurt-blossom.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/frankfurt-blossom.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hidden Gems in Composer Every PHP Developer Should Know</title><link href="https://imdhemy.com/blog/php/hidden-gems-in-composer.html" rel="alternate" type="text/html" title="Hidden Gems in Composer Every PHP Developer Should Know" /><published>2023-04-16T00:00:00+00:00</published><updated>2023-04-16T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/hidden-gems-in-composer</id><content type="html" xml:base="https://imdhemy.com/blog/php/hidden-gems-in-composer.html"><![CDATA[<p>Composer is the most popular PHP dependency manager. I’ve heard about other package managers like <code class="language-plaintext highlighter-rouge">PEAR</code> &amp; <code class="language-plaintext highlighter-rouge">Phing</code>, but
I’ve never used them. While many developers are familiar with basic Composer commands like <code class="language-plaintext highlighter-rouge">install</code>, <code class="language-plaintext highlighter-rouge">update</code>,
and <code class="language-plaintext highlighter-rouge">require</code>, there are several hidden gems in Composer that can make maintaining your dependencies easier. In this
blog post, We’ll explore some of these hidden gems.</p>

<h2 id="1-composer-bump--composer-audit">1. composer bump &amp; composer audit</h2>

<p>Composer 2.4 added two new commands <code class="language-plaintext highlighter-rouge">composer bump</code> and <code class="language-plaintext highlighter-rouge">composer audit</code>.</p>

<p><code class="language-plaintext highlighter-rouge">composer bump</code> “bumps” the package version constraints listed in the composer.json file by increasing them to the
latest version within the allowed constraints.</p>

<p><code class="language-plaintext highlighter-rouge">composer audit</code>, scans the installed packages for reported security vulnerabilities. It exists with an error code if
there are any packages installed with known security vulnerabilities.</p>

<p>You can read more about them in the official <a href="https://php.watch/articles/composer-24">blog post</a>.</p>

<h2 id="2-composer-outdated">2. composer outdated</h2>

<p>Keeping your dependencies up-to-date is important for security and compatibility reasons. However, it can be
time-consuming to manually check for updates to each package in your project. This is where <code class="language-plaintext highlighter-rouge">composer outdated</code> comes
in. This command lists all the packages that have newer versions available, this comes with a color legend to help you
determine which packages are recommended to update or just possible to update.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer outdated
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Color legend:
- patch or minor release available - update recommended
- major release available - update possible

Direct dependencies required <span class="k">in </span>composer.json:
blackfire/php-sdk                  v1.33.0            v1.35.0            Blackfire.io PHP SDK
doctrine/annotations               1.14.3             2.0.1              Docblock Annotations Parser

... Other packages are omitted <span class="k">for </span>brevity ...

</code></pre></div></div>

<h2 id="3-composer-show-latest">3. composer show –latest</h2>

<p>Similar to composer outdated, <code class="language-plaintext highlighter-rouge">composer show --latest</code> shows you the latest version of each package that is available on
the remote repository. This can be helpful for keeping track of the latest package versions and deciding when to update
your project. The <code class="language-plaintext highlighter-rouge">composer show</code> command has a lot of other useful options that you can explore by running
<code class="language-plaintext highlighter-rouge">composer show --help</code>.</p>

<h2 id="4-composer-why--composer-why-not">4. composer why &amp; composer why-not</h2>

<p>Sometimes, when you try to install a package with Composer, it fails due to dependency conflicts or other issues. In
these situations, it can be difficult to determine why the package cannot be installed. This is where <code class="language-plaintext highlighter-rouge">composer why</code> and
<code class="language-plaintext highlighter-rouge">composer why-not</code> come in.</p>

<p><code class="language-plaintext highlighter-rouge">composer why</code> command tells you which other packages depend on a certain package. For example, you can run the
following command to find out which packages depend on <code class="language-plaintext highlighter-rouge">vimeo/psalm</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer why vimeo/psalm
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">composer why-not</code> shows you a detailed explanation of why a package cannot be installed, including all the packages
that are blocking it. This can be helpful for troubleshooting complex dependency issues. Specify a version constraint to
verify whether upgrades can be performed in your project, and if not why not. See the following example to find out why
PHPUnit 10 cannot be installed in your project:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer why-not phpunit/phpunit 10
</code></pre></div></div>

<h2 id="5-composer-with-dependencies">5. composer –with-dependencies</h2>

<p>The <code class="language-plaintext highlighter-rouge">composer update</code>, <code class="language-plaintext highlighter-rouge">composer require</code>, and <code class="language-plaintext highlighter-rouge">composer remove</code> commands have a <code class="language-plaintext highlighter-rouge">--with-dependencies</code> and
<code class="language-plaintext highlighter-rouge">--with-all-dependencies</code> option that can be used to update all the dependencies of a package. This can be useful when
you want to update a package and all the packages that depend on it. For example, you can run the following command to
update the <code class="language-plaintext highlighter-rouge">symfony/console</code> package and all the packages that depend on it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer update symfony/console <span class="nt">--with-dependencies</span>
</code></pre></div></div>

<p>There are shortcuts for these options, you can use <code class="language-plaintext highlighter-rouge">-W</code> and <code class="language-plaintext highlighter-rouge">-w</code> instead of <code class="language-plaintext highlighter-rouge">--with-dependencies</code> and
<code class="language-plaintext highlighter-rouge">--with-all-dependencies</code>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--with-dependencies (-w)</code>: Update also dependencies of packages in the argument list, except those which are root
requirements.</li>
  <li><code class="language-plaintext highlighter-rouge">--with-all-dependencies (-W)</code>: Update also dependencies of packages in the argument list, including those which are
root requirements.</li>
</ul>

<p>It’d be better to use the short versions as they work fine with different commands like <code class="language-plaintext highlighter-rouge">composer require</code> that has a
<code class="language-plaintext highlighter-rouge">--update-with-dependencies (-w)</code> and <code class="language-plaintext highlighter-rouge">--update-with-all-dependencies (-W)</code> option.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Upgrading your dependencies can be a tedious task, but it’s important to keep your project up-to-date. Using the
mentioned commands can help you resolve dependency issues and keep your project up-to-date. I hope you found this
article useful.</p>

<p><small>Photo by <a href="https://unsplash.com/@dtopkin1">Dayne Topkin</a> on <a href="https://unsplash.com">Unsplash</a></small></p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Composer is the most popular PHP dependency manager. I’ve heard about other package managers like PEAR &amp; Phing, but I’ve never used them. While many developers are familiar with basic Composer commands like install, update, and require, there are several hidden gems in Composer that can make maintaining your dependencies easier. In this blog post, We’ll explore some of these hidden gems.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/glass-on-music-notes.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/glass-on-music-notes.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Back to dark theme</title><link href="https://imdhemy.com/blog/generic/back-to-dark-theme.html" rel="alternate" type="text/html" title="Back to dark theme" /><published>2023-04-09T00:00:00+00:00</published><updated>2023-04-09T00:00:00+00:00</updated><id>https://imdhemy.com/blog/generic/back-to-dark-theme</id><content type="html" xml:base="https://imdhemy.com/blog/generic/back-to-dark-theme.html"><![CDATA[<p>I always liked dark themes, but I came across
this <a href="https://stitcher.io/blog/why-light-themes-are-better-according-to-science">blog post</a> by Brent, and I thought I’d
give it a try. I installed the Light lite theme on my PHPStorm and WebStorm. In the beginning, it wasn’t comfortable,
but I thought I just needed to get used to it and I could
even <a href="https://github.com/imdhemy/phpstorm-light-lite-theme">modify the theme</a> to my liking.</p>

<p>I pushed myself to use it for around two months, but I couldn’t get used to it. Finally, I decided to go back to the
dark theme. I’m using the <a href="https://www.nordtheme.com/">Nord</a> theme, and I’m happy with it.</p>

<p>Whenever I google for “Dark theme vs Light theme”, I get a lot of articles, and YouTube videos, saying that light themes
are better for your eyes. I don’t know if that’s true, but I know that I’m more productive with dark themes.</p>

<p>It could be because I’m from the old school of using white chalk on a blackboard? 🤔😅</p>]]></content><author><name>Dhemy</name></author><category term="generic" /><summary type="html"><![CDATA[I always liked dark themes, but I came across this blog post by Brent, and I thought I’d give it a try. I installed the Light lite theme on my PHPStorm and WebStorm. In the beginning, it wasn’t comfortable, but I thought I just needed to get used to it and I could even modify the theme to my liking.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/nord.png" /><media:content medium="image" url="https://imdhemy.com/assets/img/nord.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Approximating square roots with Newton’s method</title><link href="https://imdhemy.com/blog/dsa/approximating-square-roots-with-newton's-method.html" rel="alternate" type="text/html" title="Approximating square roots with Newton’s method" /><published>2022-12-12T11:55:59+00:00</published><updated>2022-12-12T11:55:59+00:00</updated><id>https://imdhemy.com/blog/dsa/approximating-square-roots-with-newton&apos;s-method</id><content type="html" xml:base="https://imdhemy.com/blog/dsa/approximating-square-roots-with-newton&apos;s-method.html"><![CDATA[<p>Newton’s method is a way to approximate the roots of an equation. The idea is to start with an initial guess, then to
approximate the function by its tangent line, and finally to compute the x-intercept of the tangent line. The
x-intercept is a better approximation of the root than the initial guess, and the process can be repeated until the
desired accuracy is reached.</p>

<p>Let’s say we need to find the square root of a number <code class="language-plaintext highlighter-rouge">a</code>. The equation we need to solve is \(f(x) = x^2 - a = 0\).</p>

<ol>
  <li>
    <p>We can start by drawing the curve of the function \(f(x)\) (Blue line in the figure below). The curve is a parabola
,but it shows only one root, the positive root.</p>
  </li>
  <li>
    <p>Then, we can start by choosing an initial guess \(x_n\) (Blue dashed line in the figure below). The tangent line at
the point \(x_n\) is \(f'(x_n) = 2x_n\) (Red line in the figure below). The x-intercept of the tangent line is the
next guess.</p>
  </li>
  <li>
    <p>As you can see, the next guess \(x_{n+1}\) is closer to the root than the previous guess \(x_n\). The process can be
repeated until the desired accuracy is reached.</p>
  </li>
</ol>

<p><img src="/assets/img/Newton_iteration.png" alt="Newton Iteration" /></p>

<p>So, we can approximate the square root of \(a\) by:</p>

\[x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)}\]

\[= x_n - \frac{x_n^2 - a}{2x_n}\]

\[= \frac{1}{2} (x_n + \frac{a}{x_n})\]

<p>We start with an initial guess \(x_0\) and then we iterate over the formula until we reach a desired accuracy. For
each step, we can calculate the error \(\epsilon\) as:</p>

\[\epsilon = \frac{|x_{n+1} - x_n|}{x_{n+1}}\]

<p>For example, if the first guess is \(x_0 = 1\), and the new guess is \(x_1 = 1.5\), then the error is:</p>

\[\epsilon = \frac{|1.5 - 1|}{1.5} = 0.333\]

<p>The error value ranges between \(0\) and \(1\), and the smaller the error, the closer we are to the square root of
\(a\). When the error equals \(0\), we have reached the square root of \(a\). We can also define an accepted error
so that we stop iterating when the error is less than the accepted error.</p>

<h2 id="example-1">Example (1)</h2>

<p>Let’s find the square root of \(a = 9\) using Newton’s method. We start with an initial guess \(x_0 = 1\), and then we
iterate over the formula until we reach a desired accuracy. This time, we will use an accepted error of \(0\). The
following table shows the steps:</p>

<table>
  <thead>
    <tr>
      <th>\(n\)</th>
      <th>\(x_n\)</th>
      <th>\(x_{n+1}\)</th>
      <th>\(\epsilon\)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>5</td>
      <td>0.8</td>
    </tr>
    <tr>
      <td>1</td>
      <td>5</td>
      <td>3.4</td>
      <td>0.47</td>
    </tr>
    <tr>
      <td>2</td>
      <td>3.4</td>
      <td>3.023</td>
      <td>0.12</td>
    </tr>
    <tr>
      <td>3</td>
      <td>3.023</td>
      <td>3.000091</td>
      <td>0.0076</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3.000091</td>
      <td>3.000000092</td>
      <td>0.00003</td>
    </tr>
    <tr>
      <td>5</td>
      <td>3.000000092</td>
      <td>3.000000000</td>
      <td>0.00000003</td>
    </tr>
    <tr>
      <td>6</td>
      <td><strong>3</strong></td>
      <td>3</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>As we can see, after the sixth step, the error is equal to \(0\), so we have reached the square root of \(9\).</p>

<h2 id="example-2">Example (2)</h2>

<p>Let’s find the square root of \(a = 16\) with an initial guess of \(x_0 = 1\) and an accepted error of \(0.1\).</p>

<table>
  <thead>
    <tr>
      <th>\(n\)</th>
      <th>\(x_n\)</th>
      <th>\(x_{n+1}\)</th>
      <th>\(\epsilon\)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>8.5</td>
      <td>0.88</td>
    </tr>
    <tr>
      <td>1</td>
      <td>8.5</td>
      <td>5.04</td>
      <td>0.69</td>
    </tr>
    <tr>
      <td>2</td>
      <td>5.04</td>
      <td>4.0016</td>
      <td>0.26</td>
    </tr>
    <tr>
      <td>3</td>
      <td><strong>4.0016</strong></td>
      <td>3.999904</td>
      <td>0.00004</td>
    </tr>
  </tbody>
</table>

<p>After the third step, the error is less than the accepted error, so we stop iterating. The square root of \(16\) is
\(4.0016\), which is close enough to the actual square root of \(16\) which is \(4\).</p>

<h2 id="implementation">Implementation</h2>

<p>The following code implements Newton’s method in Java:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NewtonsMethod</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">sqrt</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">x0</span><span class="o">,</span> <span class="kt">double</span> <span class="n">epsilon</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x0</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">error</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        
        <span class="k">while</span> <span class="o">(</span><span class="n">error</span> <span class="o">&gt;</span> <span class="n">epsilon</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">double</span> <span class="n">x1</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">a</span> <span class="o">/</span> <span class="n">x</span><span class="o">);</span>
            <span class="n">error</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">x1</span> <span class="o">-</span> <span class="n">x</span><span class="o">)</span> <span class="o">/</span> <span class="n">x1</span><span class="o">;</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">x1</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="leetcode-problem">Leetcode problem</h2>

<p>We can use Newton’s method to solve the <a href="https://leetcode.com/problems/sqrtx/">69. Sqrt(x)</a> problem on Leetcode.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">mySqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">x0</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">epsilon</span> <span class="o">=</span> <span class="mf">0.00000000000001</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">sqrt</span> <span class="o">=</span> <span class="nc">NewtonsMethod</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">x0</span><span class="o">,</span> <span class="n">epsilon</span><span class="o">);</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">sqrt</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The same problem can be solved using binary search:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">mySqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
       <span class="kt">long</span> <span class="n">lo</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">x</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">c</span><span class="o">;</span>

       <span class="k">while</span> <span class="o">(</span><span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="o">)</span> <span class="o">{</span>
           <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">lo</span><span class="o">;</span>
           <span class="n">c</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">*</span> <span class="n">mid</span><span class="o">;</span>

           <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">c</span><span class="o">)</span> <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">mid</span><span class="o">;</span>
           <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
           <span class="k">else</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
       <span class="o">}</span>

       <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">hi</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dhemy</name></author><category term="dsa" /><summary type="html"><![CDATA[Newton’s method is a way to approximate the roots of an equation. The idea is to start with an initial guess, then to approximate the function by its tangent line, and finally to compute the x-intercept of the tangent line. The x-intercept is a better approximation of the root than the initial guess, and the process can be repeated until the desired accuracy is reached.]]></summary></entry><entry><title type="html">How to organize your unit tests</title><link href="https://imdhemy.com/blog/testing/how-to-organize-your-unit-tests.html" rel="alternate" type="text/html" title="How to organize your unit tests" /><published>2022-11-11T22:48:41+00:00</published><updated>2022-11-11T22:48:41+00:00</updated><id>https://imdhemy.com/blog/testing/how-to-organize-your-unit-tests</id><content type="html" xml:base="https://imdhemy.com/blog/testing/how-to-organize-your-unit-tests.html"><![CDATA[<p>One day, in the school of medicine, the lecturer told us an important thing about naming. He was explaining the
self-clearing mechanism of the airways in the respiratory system which is known as <strong>mucociliary escalator</strong> and he
said, to understand anything in medicine, you need to understand the idea behind the name, you need to understand the
culture behind the name. Check the following image, it auto-moves the particles outside the lungs like an escalator.</p>

<p>We are not native English speakers, so this advice applies to us.</p>

<p><img src="/assets/img/mucociliary-escalator.gif" alt="mucociliary escalator" />
<img src="/assets/img/escalator-fail.gif" alt="escalator fail" /></p>

<p>I believe it’s the same for programming, understanding the idea or the culture behind the name makes it easier to
understand the concept. So, let’s talk about the idea behind the names of the unit tests.</p>

<h2 id="the-names-in-testing">The names in testing</h2>

<p>In general, testing is finding out how well something works. In terms of human beings, testing tells what level of
knowledge or skill has been acquired. In terms of electronics, testing tells how well the device works.</p>

<p>The device under test is the thing that is being tested. In the case of testing car stability, the car is the device
under test. It’s referred to as <strong>DUT</strong>.</p>

<p>Engineers may use a device called <strong>test fixture</strong> to test the DUT. The test fixture is a device that is used to hold
the DUT in a specific position or to provide a particular input or output to the DUT. In the case of testing car
stability, the test fixture may be a ramp.</p>

<p>Let’s map this to programming. The DUT will be <strong>SUT</strong> (System under test). The test fixture is a piece of data that
could be a dependency or an argument passed to the SUT. It can also be data in the database or a file in the file
system.</p>

<div class="tip">
The test fixture's state and behavior should not change during the test, the ramp remains a ramp, or at least the changes should be predictable and controllable.
</div>

<h2 id="test-file-location">Test file location</h2>

<p>There are two conventions for organizing the test files. The first one is to put the test files in the same directory as
the source files. The second one is to put the test files in a separate directory. The first is called <strong>in-place</strong> and
the second is called <strong>out-of-place</strong>.</p>

<p><strong>In-place</strong> tests are painless to find, you see at a glance if a part of your application lacks tests. When you move
the source (inevitable), you remember to move the test, When you rename the source (inevitable), you remember to rename
the test. The downside is where to put integration tests, as they don’t belong to any specific source file. It’s often
better to create an appropriate directory for them in the <code class="language-plaintext highlighter-rouge">tests</code> directory.</p>

<p><strong>Out-of-place</strong> tests have a natural home directory <code class="language-plaintext highlighter-rouge">tests</code>. The directories and files in the <code class="language-plaintext highlighter-rouge">tests</code> directory should
mirror their corresponding source files. This way, you can easily integrate the tests with your IDE.</p>

<p>I prefer the <strong>out-of-place</strong> convention, even if I have to remember to move or rename the test files to reflect the
changes in the source files, but I’m not dogmatic about it. I’m open to changing my mind if I find a good reason to do
so.</p>

<h2 id="how-to-struct-a-test-case">How to struct a test case</h2>

<p>Structuring a test case starts with naming the test method. It’s often to encounter the following
pattern: <code class="language-plaintext highlighter-rouge">[MethodUnderTest]_[Scenario]_[ExpectedResult]</code>. I used to follow this pattern, but I found it not very
helpful. It focuses on the implementation details, not the behavior.</p>

<p>The pattern I prefer is PLAIN ENGLISH. We describe in plain English what we’re testing in a language easy to understand,
even for non-programmers.</p>

<p>Using plain English is required by the nature of some test frameworks. For example, in the case
of <a href="https://jestjs.io/">Jest</a>, the test method name is the test case name. So, you have to use plain English to name the
test method. You can do the same with the xUnit frameworks.</p>

<p>I also prefer to separate words by underscores, it makes it easier to read. I use snake case for the test method names,
even if the convention in the language or the framework is camel case. Yes, I know it’s not consistent and it breaks the
coding style, but I’m open to breaking rules if I find a good reason to do so. It’s easy to exclude the test files from
the coding style check of this rule.</p>

<p>The good reason here is readability, just compare the readability of the following two test method names:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ItShouldIlluminateTheLedAtLowLevelLight
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>It_should_illuminate_the_led_at_low_level_light
</code></pre></div></div>

<p>The snake case version is much easier to read, as it resembles the natural way of using spaces between words.</p>

<p><strong>So, what about the body of the test case?</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">Given-When-Then</code> or <code class="language-plaintext highlighter-rouge">Arrange-Act-Assert</code> is a great way to structure test cases. It prescribes an order of
operations:</p>

<h3 id="given-arrange">Given (Arrange)</h3>

<p>The <code class="language-plaintext highlighter-rouge">Given</code> section is where you set up the test case. You do all the preparations to make the test case ready to run.
You may require a fixture, a dependency, a database, a file, etc. You need also to set the initial state. This section
should end by creating the SUT instance in the initial state.</p>

<p>As far as I know, all xUnit frameworks provide a <code class="language-plaintext highlighter-rouge">setup</code> method to do the preparations. Even though this is not the
place to put the <code class="language-plaintext highlighter-rouge">Given</code> section.</p>

<div class="tip">
The `setup` method is not the place to put the `Given` section. The `setup` method is for the preparations that are common to all test cases. The `Given` section is for the preparations that are specific to the test case.
</div>

<p>Putting the <code class="language-plaintext highlighter-rouge">Given</code> section in the <code class="language-plaintext highlighter-rouge">setup</code> method is not a good idea, because it makes the test case less readable, and
it couples the test cases together. If you need to change the initial state of the SUT, you have to change the <code class="language-plaintext highlighter-rouge">setup</code>
method, which may break other tests. The <code class="language-plaintext highlighter-rouge">Given</code> section should be as close to the <code class="language-plaintext highlighter-rouge">When</code> section.</p>

<p>If your <code class="language-plaintext highlighter-rouge">Given</code> section has a boilerplate code, you can extract each part to a factory method with a descriptive name.
This way, you can reuse the factory method in other test cases.</p>

<p>For instance, <code class="language-plaintext highlighter-rouge">createUser()</code>, <code class="language-plaintext highlighter-rouge">createUserWithOrders()</code>, and <code class="language-plaintext highlighter-rouge">createUserWithOrdersAndPayments()</code> are factory methods that
create a user with a different initial state.</p>

<h3 id="when-act">When (Act)</h3>

<p>The <code class="language-plaintext highlighter-rouge">When</code> section is where you execute the action under test. It SHOULD be a single operation. If you need to execute
multiple operations, it’s a sign that you are not unit testing! You can find more about this in
the <a href="/blog/testing/what-is-a-unit-test">What is a unit test?</a> post.</p>

<h3 id="then-assert">Then (Assert)</h3>

<p>The <code class="language-plaintext highlighter-rouge">Then</code> section is where you assert the expected result. Assertions will ultimately determine the success or failure
of the test case. Each xUnit framework provides a set of assertion methods. You can use them to assert the expected
result or you can require a third-party assertion library. For example, <a href="https://www.chaijs.com/">Chai</a> is a popular
assertion library for Node.js. PHPUnit has a built-in assertion library, but Laravel provides a wrapper for
the <a href="https://laravel.com/docs/9.x/http-tests#available-assertions">PHPUnit assertions</a>.</p>

<h2 id="dont-abuse-database-fixtures-and-seeds">Don’t abuse database fixtures and seeds</h2>

<p>You may encounter a test suite that uses database fixtures to set the initial state of the database. This is a bad idea.
Do you remember when we said A RAMP IS A RAMP? if some data is going to change, it’s not a fixture anymore. The
downsides of using database fixtures are:</p>

<p>You have to run the DB fixtures before each test to prepare the initial state, which makes the test suite slow, and
coupled. The thing which breaks the test isolation.</p>

<p>Changing a state of a DB fixture in one test will affect the other tests, and it forces you to run them in a specific
order.</p>

<p>So, what’s a fixture then? A fixture is a piece of data that should not change during the test. It could be a JSON file
containing a particular response, a file to test the upload functionality, or a database record containing a global
configuration or a list of countries.</p>

<p><strong>Seeds</strong> are a different thing. Seeds are used to plant initial data to a Database. It’s extremely useful when you need
to populate your application with data once installed, let’s say an admin user or an example blog post. Seeds are not
used in the test suite.</p>

<p><strong>So, what’s the solution?</strong> use factories! Either factory methods or factory classes.</p>

<h2 id="summary">Summary</h2>

<p>In this post, we talked about the location of test files, <strong>in-place</strong> or <strong>out-of-place</strong>. We also talked about using
plain English to name the test methods and separating words by underscores. The <code class="language-plaintext highlighter-rouge">Given-When-Then</code>
or <code class="language-plaintext highlighter-rouge">Arrange-Act-Assert</code> is a great way to structure test cases. Do you remember what is a fixture? how to use them? and
the anti-patterns of the <code class="language-plaintext highlighter-rouge">Given</code> section.</p>]]></content><author><name>Dhemy</name></author><category term="testing" /><summary type="html"><![CDATA[One day, in the school of medicine, the lecturer told us an important thing about naming. He was explaining the self-clearing mechanism of the airways in the respiratory system which is known as mucociliary escalator and he said, to understand anything in medicine, you need to understand the idea behind the name, you need to understand the culture behind the name. Check the following image, it auto-moves the particles outside the lungs like an escalator.]]></summary></entry><entry><title type="html">What is a unit test</title><link href="https://imdhemy.com/blog/testing/what-is-a-unit-test.html" rel="alternate" type="text/html" title="What is a unit test" /><published>2022-08-13T17:21:35+00:00</published><updated>2022-08-13T17:21:35+00:00</updated><id>https://imdhemy.com/blog/testing/what-is-a-unit-test</id><content type="html" xml:base="https://imdhemy.com/blog/testing/what-is-a-unit-test.html"><![CDATA[<p>When I started writing this article few months ago, I got blocked by the 
idea of I’m going to write about something that everyone knows about and 
everyone can google the topic and found a ton of articles about the same 
basic topic. 
Should I publish such an article? As I said, I got blocked by this idea, the 
thing that stopped me from completing the series I started about <a href="/blog/testing/we-need-more-tests">testing</a>.</p>

<p>Finally, I decided to write this article to refer to it in case I 
needed in next articles, at least it will be an internal reference.</p>

<h2 id="what-is-a-unit-test">What is a unit test?</h2>
<p>You should already know about test automation. Given a piece of code, you 
can write another piece of code that verifies the behavior of the first. The 
second piece of code is called a unit test.</p>

<div class="tip">
    <p>A unit test should verify a small piece of code in isolation quickly.</p>
</div>

<p>As you can see, a unit test has three characteristics:</p>
<ul>
  <li>Verifies a small piece of code.</li>
  <li>Is quick to run.</li>
  <li>Works in isolation.</li>
</ul>

<p>A small piece of code could be a function, a class, a method, or whatever 
you can call a unit. If your test suite’s execution time is good enough to 
you, it means tests are quick enough.</p>

<div class="tip">
A <i>unit</i> in unit testing is a unit of behaviour, not a unit of 
<i>code</i>. This behaviour can span across as many as several classes or as 
a single method, but it should have a single entry point to trigger the behaviour.
</div>

<p>No doubt, the first two characteristics are non-controversial. The third one, isolation, is 
controversial. When it comes to isolation, there are two takes, the Mockist 
take and the Classicist take.</p>

<h2 id="mockist-take-vs-classicist-take">Mockist take vs Classicist take</h2>
<p>These two tribes are commonly referred to as the Detroit School of TDD 
(Classicist) and the London School of TDD (Mockist). A key difference 
between them is how they treat the dependencies of the code under test.</p>

<p>For the Mockist take, if a class has a dependency on another class or 
service, it is mocked or doubled. This means that isolation here is code 
isolation. But for the Classicist take, if a class has a dependency, the 
dependency should be used as it. It is not the code that needs to be 
isolated during testing. Instead, unit tests themselves should run in 
isolation from each other.</p>

<p>I believe that the style of mocking everything results in a fragile, hard to 
refactor code base. It does not reflect the real scenario, besides, it 
burdens your shoulders with maintaining the mocks when the real source code
changes. I’m not completely opposed to mocking, but we should mock to our 
advantage, wherever it makes our tests more manageable.</p>

<p>Another problem with the Mockist take is detecting changes in other services 
they are integrated with. For example, if a dependency behaviour changed, 
the mockist test will not detect it, it depends on a non-updated mock. Tests 
should be sensitive to the behavior changes and insensitive to the 
structural changes.</p>

<blockquote>
  <p>If I care about the order of operations, I’ve designed the system wrong. — <strong>Kent Beck (the Detroit School).</strong></p>
</blockquote>

<blockquote>
  <p>If I have an object that has behaviour, and I’m doing “Tell, Don’t Ask” then I can only test interactions. — <strong>Steve Freeman (the London School)</strong></p>
</blockquote>

<h2 id="when-to-mock-vs-when-to-use-real-dependencies">When to mock vs when to use real dependencies</h2>

<p>Hopefully, it’s clear now that I prefer the Classicist take. In the 
classicist take, it’s not the code that needs to be tested in an isolated 
manner. Instead, the unit tests themselves should be run in isolation from 
each other. The classes under test reside in the memory of the test runner, 
so that they can interact with each other without affecting the test results 
either you run the tests in parallel or in sequence.</p>

<p>There is a problem, Okay, they reside in the memory and not affecting 
each other, but what about the shared states? For example, the database and 
file system. Of course, changes in the database will affect the test results.
For instance, one test could create a record in the database, and the other 
test could delete the record as a part of its setup. If you run them in 
parallel, the first test will fail, not because the code is broken, but 
because it is not isolated.</p>

<p>Let’s look at three different types of dependencies: the <strong>shared</strong>, the <strong>private</strong> 
and the <strong>out-of-process</strong>. The shared dependencies are the ones that are 
shared across the test suite, for example, a static field, a database record,
and the file system.</p>

<p>The private dependencies are the ones that are not shared at all, for 
example a private field, or a function parameter.</p>

<p>The out-of-process dependencies are the ones that are the ones that run 
outside the application’s execution context. For example an external API.</p>

<p>Given the above, Classist take still can use mocks and test doubles, but 
only do that for the shared dependencies, or the out-of-process dependencies 
in case you need to test a specific behavior of the external service.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Let’s conclude them in <strong>triplets</strong>:</p>

<p><strong>A unit test has three characteristics:</strong></p>
<ul>
  <li>Verifies a small piece of code.</li>
  <li>Is quick to run.</li>
  <li>Works in isolation.</li>
</ul>

<p><strong>There are three types of dependencies:</strong></p>
<ul>
  <li>Shared.</li>
  <li>Private.</li>
  <li>Out-of-process.</li>
</ul>

<p><strong>There are three schools of TDD:</strong></p>
<ul>
  <li>The Detroit School.</li>
  <li>The London School.</li>
  <li>The one that your manager told you to use.</li>
</ul>

<p><strong>There are three reasons to use mocks:</strong></p>
<ul>
  <li>Replacing the shared dependencies.</li>
  <li>The non-deterministic behavior of the out-of-process dependencies.</li>
  <li>To make tests faster. (Replacing DB calls for example.)</li>
</ul>]]></content><author><name>Dhemy</name></author><category term="testing" /><summary type="html"><![CDATA[When I started writing this article few months ago, I got blocked by the idea of I’m going to write about something that everyone knows about and everyone can google the topic and found a ton of articles about the same basic topic. Should I publish such an article? As I said, I got blocked by this idea, the thing that stopped me from completing the series I started about testing.]]></summary></entry><entry><title type="html">Math Notes about Sum Formulas</title><link href="https://imdhemy.com/blog/dsa/math-notes-about-sum-formulas.html" rel="alternate" type="text/html" title="Math Notes about Sum Formulas" /><published>2022-07-09T00:00:00+00:00</published><updated>2022-07-09T00:00:00+00:00</updated><id>https://imdhemy.com/blog/dsa/math-notes-about-sum-formulas</id><content type="html" xml:base="https://imdhemy.com/blog/dsa/math-notes-about-sum-formulas.html"><![CDATA[<p>I’m working on enhancing my skills, expanding my knowledge and increasing my chances to pass technical interviews. Mathematics plays an important role in problem-solving. Hence, this notes! This blog post is about <strong>Sum Formulas</strong>.</p>

<p class="note">
Each sum of the form:

$$ \sum_{x=1}^{n} x^{k} = 1^{k} + 2^{k} + 3^{k} + .. + n^{k} $$

where k is a positive integer, has a closed-form formula that is a polynomial of degree (k + 1).
</p>

<p><strong>Triangular number</strong></p>

\[\sum_{x=1}^{n} x = 1 + 2 + 3 + ... + n = \frac{n (n + 1)}{2}\]

<p><strong>Square pyramidal number</strong></p>

\[\sum_{x=1}^{n} x^{2} = 1^{2} + 2^{2} + 3^{2} + ... + n^{2} = \frac{n (n + 1) (2n + 1)}{6}\]

<p>There is a general formula for such sums, called <a href="https://en.wikipedia.org/wiki/Faulhaber%27s_formula">Faulhaber’s Formula</a>.</p>

<p>In the next lines, I’ll use mathematical induction to proof the Triangular number and the Square pyramidal number formulas.</p>

<h2 id="triangular-number">Triangular number.</h2>

<p class="note">
$$ \sum_{x=1}^{n} x = 1 + 2 + 3 + ... + n = \frac{n (n + 1)}{2} $$
</p>

<p><strong>Base step:</strong> Base case, for n = 1</p>

\[L.H.S = 1\]

\[R.H.S =  \frac{n (n + 1)}{2} = \frac{1 ( 1 + 1)}{2} = \frac{2}{2} = 1\]

\[L.H.S = R.H.S = 1\]

<hr />

<p><strong>Inductive hypothesis Step</strong>
The equation is true for an arbitrary integer <code class="language-plaintext highlighter-rouge">k</code></p>

\[1 + 2 + 3 + ... + k = \frac{k(k+1)}{2}\]

<hr />

<p><strong>Induction Step</strong></p>

<p>Based on the <strong>inductive hypothesis</strong>, let’s proof the equation if true for <code class="language-plaintext highlighter-rouge">n = k + 1</code></p>

\[L.H.S = 1 + 2 + 3 ... + k + k + 1\]

\[= \frac{k(k+1)}{2} + (k + 1)\]

\[= \frac{k(k+1)}{2} + \frac{2(k + 1)}{2}\]

\[= \frac{k^2 + k + 2k + 2}{2}\]

\[= \frac{k^2 + 3k + 2}{2}\]

\[= \frac{(k+1)(k+2)}{2}\]

\[= \frac{(k + 1)(k+1+1)}{2}\]

<hr />
<p>For <code class="language-plaintext highlighter-rouge">n = k + 1</code></p>

\[R.H.S = \frac{n(n + 1)}{2} =  \frac{(k+1)(K + 1 + 1)}{2}\]

\[L.H.S = R.H.S \#\]

<h2 id="square-pyramidal-number">Square pyramidal number</h2>

<p class="note">
$$ \sum_{x=1}^{n} x^{2} = 1^{2} + 2^{2} + 3^{2} + ... + n^{2} = \frac{n (n + 1) (2n + 1)}{6} $$
</p>

<p><strong>Base step:</strong> Base case, for n = 1</p>

\[L.H.S = 1^2 = 1\]

\[R.H.S = \frac{1(1+1)(2 \times 1 + 1)}{6} = \frac{2 \times 3}{6} = 1\]

\[L.H.S = R.H.S\]

<hr />

<p><strong>Inductive hypothesis Step</strong>
The equation is true for an arbitrary integer <code class="language-plaintext highlighter-rouge">k</code></p>

\[1^2 + 2^2 + 3^2 + ... + k^2 = \frac{k(k+1)(2k+1)}{6}\]

<hr />

<p><strong>Induction Step</strong></p>

<p>Based on the <strong>inductive hypothesis</strong>, let’s proof the equation if true for <code class="language-plaintext highlighter-rouge">n = k + 1</code></p>

\[L.H.S = 1^2 + 2^2 + 3^2 + ... + k^2 + (k+1)^2\]

\[= \frac{k(k+1)(2k+1)}{6} + (k+1)^2\]

\[= \frac{k(k+1)(2k+1)}{6} + \frac{6(k+1)^2}{6}\]

<p>Given the R.H.S:</p>

\[R.H.S = \frac{n(n+1)(2n+1)}{6} = \frac{(k+1)(k+2)(2k+3)}{6}\]

<p>So, we can ignore the <code class="language-plaintext highlighter-rouge">6</code> in the denominator from both sides for now:</p>

\[{L.H.S}\times{6} = k(k+1)(2k+1) + 6(k+1)^2\]

\[= (k^2 + k)(2k+1) + 6(k^2+2k+1)\]

\[= 2k^3 + k^2 + 2k^2 + k + 6k^2 + 12k + 6\]

\[{L.H.S}\times{6} = 2k^3 + 9k^2 + 13k + 6\]

<hr />

\[{R.H.S}\times{6} =  (k+1)(k+2)(2k+3)\]

\[= (k^2 + 3k + 2)(2k+3)\]

\[= 2k^3 + 6k^2 + 3k^2 + 4k + 9k + 6\]

\[{R.H.S}\times{6} = 2k^3 + 9k^2 + 13k + 6\]

<hr />

\[L.H.S = \frac{2k^3 + 9k^2 + 13k + 6}{6}\]

\[R.H.S =  \frac{2k^3 + 9k^2 + 13k + 6}{6}\]

\[R.H.S = L.H.S \#\]

<h2 id="number-progressions">Number Progressions</h2>
<p>A progression, which is also known as a sequence, is nothing but a pattern of numbers. For example, <code class="language-plaintext highlighter-rouge">3, 6, 9, 12</code> is a progression because there is a pattern observed where every number here is obtained by adding 3 to its previous number.</p>

<p>There are four types of the most common progressions.</p>

<h3 id="arithmetic-progression">Arithmetic Progression</h3>
<p>Arithmetic Progression (AP) is a sequence of numbers where the difference between any two consecutive numbers is constant.</p>

<p>For Example: <code class="language-plaintext highlighter-rouge">3, 7, 11, 15</code>, is an AP where the common difference is <code class="language-plaintext highlighter-rouge">4</code>.</p>

<p>For an AP:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">a</code> is the first term.</li>
  <li><code class="language-plaintext highlighter-rouge">l</code> is the last term.</li>
  <li><code class="language-plaintext highlighter-rouge">d</code> is the common difference.</li>
  <li>The <code class="language-plaintext highlighter-rouge">n</code> term could be found as follows: \(a_{n} = a + (n - 1) d\)</li>
  <li>We can find the <strong>sum</strong> as follows: \(S = \frac{n(a + l)}{2}\)</li>
</ul>

<p>Let’s proof this formula:</p>
<p class="note">
The sum of an arithmetic is 

$$ S = \frac{n(a + l)}{2} $$
</p>

<p>Suppose \(a_{1}, a_{2}, a_{3}, ..., a_{n}\) be an arithmetic progression whose first term is <code class="language-plaintext highlighter-rouge">a</code> and the common difference is <code class="language-plaintext highlighter-rouge">d</code>.</p>

<p>Then:</p>

\[a_{1} = a\]

\[a_{2} = a + d\]

\[a_{3} = a + 2d\]

\[a_{n} = a + (n - 1) d\]

<hr />

\[S_{n} = a + (a + d) + (a + 2d) + ... + \{a + (n - 3)d\} + \{a + (n - 2)d\} + \{a + (n - 1)d\} \;\;\;\;\;\;\;\; (i)\]

<p>And with a simple trick of reversing the order:</p>

\[S_{n} = \{a + (n - 1)d\} +  \{a + (n - 2)d\} + \{a + (n - 3)d\} + ... +  (a + 2d) + (a + d) + a  \;\;\;\;\;\;\;\; (ii)\]

<p>by adding \((i)\) and \((ii)\)</p>

<table>
  <thead>
    <tr>
      <th>Term (i)</th>
      <th>Term (ii)</th>
      <th>Sum</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a</td>
      <td>\(a + (n - 1)d\)</td>
      <td>\(2a + (n-1)d\)</td>
    </tr>
    <tr>
      <td>a + d</td>
      <td>\(a + (n - 2)d\)</td>
      <td>\(2a + (n-1)d\)</td>
    </tr>
    <tr>
      <td>a + 2d</td>
      <td>\(a + (n - 3)d\)</td>
      <td>\(2a + (n-1)d\)</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td>\(2S_{n} = n\{2a + (n-1)d\}\)</td>
    </tr>
  </tbody>
</table>

\[2S_{n} = \{2a + (n-1)d\} + \{2a + (n-1)d\} + ... + \{2a + (n-1)d\}\]

<hr />

\[2S_{n} = n\{2a + (n-1)d\}\]

\[2S_{n} = n\{a + a + (n-1)d\}\]

\[2S_{n} = n(a + l)\]

\[S_{n} = \frac{n(a+l)}{2} \#\]

<h3 id="geometric-progression">Geometric Progression</h3>
<p>Geometric Progression (GP) is a sequence of numbers where the ratio between any two consecutive numbers is constant.</p>

\[S = \frac{l\times k - a}{k - 1}\]

<h3 id="harmonic-progression">Harmonic Progression</h3>
<p>A series of numbers is said to be in harmonic sequence if the reciprocals (the inverse) of all the elements of the sequence form an arithmetic sequence.</p>

<p>For example:
\(\sum_{x=1}^{n}{\frac{1}{x}} = 1 + \frac{1}{2} +  \frac{1}{3} + ... + \frac{1}{n}\)</p>

<h3 id="fibonacci-progression">Fibonacci Progression</h3>
<p>Fibonacci numbers form an interesting sequence of numbers in which each element is obtained by adding two preceding elements and the sequence starts with <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">1</code>.</p>

<p>Sequence is defined as, 
\(F_{0} = 0\) and \(F_{1} = 1\) and \(F_{n} = F_{n-1} + F_{n-2}\)</p>]]></content><author><name>Dhemy</name></author><category term="DSA" /><summary type="html"><![CDATA[I’m working on enhancing my skills, expanding my knowledge and increasing my chances to pass technical interviews. Mathematics plays an important role in problem-solving. Hence, this notes! This blog post is about Sum Formulas.]]></summary></entry><entry><title type="html">We need more tests</title><link href="https://imdhemy.com/blog/testing/we-need-more-tests.html" rel="alternate" type="text/html" title="We need more tests" /><published>2022-01-31T06:05:51+00:00</published><updated>2022-01-31T06:05:51+00:00</updated><id>https://imdhemy.com/blog/testing/we-need-more-tests</id><content type="html" xml:base="https://imdhemy.com/blog/testing/we-need-more-tests.html"><![CDATA[<p>Well, It’s not about Coronavirus pandemic this time 😷. <a href="https://moisesbm.wordpress.com/">Moisés Belchín Martínez</a> (Moi),
my awesome ex-CTO, keeps repeating these words in every PR <strong>“We need more tests”</strong>. Sometimes it appears as a joke
about Covid-19, but I believe he totally meant it.</p>

<p>There’s a reason for optimism about your own code because you wrote it, it works, and you did your best following the
best practices of clean code, but is that enough to merge and release this code? TBH, No!</p>

<p>Moi doesn’t mean the quantity, but actually he meant the quality of tests we wrote to avoid
the <a href="https://www.atlassian.com/agile/software-development/technical-debt">technical debt</a> as much as possible by
having <a href="https://www.linkedin.com/feed/update/urn:li:activity:6886937179793223680?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A6886937179793223680%2C6888937049659854849%29">a strict definition of Done</a>.
In this article, I’m discussing the metrics of code coverage, are they reliable enough? de we really need more tests?
How to measure a test suite quality? Vamos!</p>

<h2 id="what-is-the-goal-of-unit-testing">What is the goal of unit testing?</h2>

<p>A simple question, yet one that must be addressed! The goal of unit testing is to allow <strong>sustainable growth</strong> of the
software project. When you start a new project, you make progress so quickly, and get results with a little slaps on
your keyboard. No bad architectural decisions have been made yet. No requirement changes or existing code to worry
about. Actually, nothing is dragging you back. Eventually, the development speed slows down, and adding a new feature
may break another.</p>

<p>As per wikipedia, the idea that software eventually rots as it is changed is called <strong>Software entropy</strong>. Any code
modification leads to an amount of disorder in your code base. Leaving entropy without proper care, such as constant
cleaning and refactoring, the system becomes increasingly complex and disorganized.</p>

<p>Software entropy is tied to the notion of change and has no meaning in a static system. If there is no intent to alter
the system, we cannot speak of its entropy. One more idea to put in mind, when software entropy overwhelms a project,
the project freezes!</p>

<p>Tests act as a safety net. Tests help make sure the existing functionality works, even after you introduce new features
or refactor the code to better fit new requirements. Besides, it helps have a well-designed software.</p>

<h2 id="dont-just-throw-more-tests">Don’t just throw more tests</h2>

<p>Not all tests are created equal. Some of them are valuable and contribute a lot to overall software quality. Others
don’t. You can’t achieve the goal of unit testing by just throwing more tests at the project. Let’s discuss the *
*QUANTITY** aspect.</p>

<p><strong>Coverage metrics</strong> are used to show how much source code tests execute. It gives you a percentage from <code class="language-plaintext highlighter-rouge">0%</code> (No source
code executed) to <code class="language-plaintext highlighter-rouge">100%</code> (It covers all lines of code).</p>

<p>If a metric shows that is there too little coverage in your code base, say, only <code class="language-plaintext highlighter-rouge">10%</code>. That’s a good indication that
you are not testing enough. But the reverse isn’t true: even <code class="language-plaintext highlighter-rouge">100%</code> coverage isn’t a guarantee that you have a
good-quality test suite. A test suite that provides high coverage can still be of poor quality.</p>

<p>Consider the following example, using the code coverage as a metric.</p>

<p><strong>Read the code comments:</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="n">bool</span> <span class="nf">isBig</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="o">)</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// Not covered with test</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// The following test calls the `isBig()` function. </span>
<span class="c1">// The if condition evaluates to `false`, then it returns false.</span>
<span class="c1">// This code executes (4) lines out of total (5) lines of code.</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">Test</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">bool</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">isBig</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
    <span class="nc">Assertions</span><span class="o">.</span><span class="na">AssertFalse</span><span class="o">(</span><span class="n">actual</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>With a simple calculation using the code coverage formula:</p>

\[Code\ coverage = \frac{Lines\ of\ code\ executed}{Total\ number\ of\ lines}\]

\[Code\ coverage = \frac{4}{5} = 0.8 = 80\%\]

<p>Now, with the same test, what if we refactored our function to remove the unnecessary if condition:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="n">bool</span> <span class="nf">isBig</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>When running our test again, it executes the full lines of code with <code class="language-plaintext highlighter-rouge">100%</code> coverage! The test still verifies the same
number of possible outcomes and without any improvement to our test suite, the test coverage percentage raised
from <code class="language-plaintext highlighter-rouge">80%</code> to <code class="language-plaintext highlighter-rouge">100%</code>.</p>

<p class="note">
Having a low test coverage is an indication of a bad test suite, but having a high number tells nothing about the <strong>QUALITY</strong> of the test suite.
</p>

<p>To enable sustainable project growth, you have to focus on high quality tests. Those are the only type of tests that are
worth keeping in the test suite.</p>

<h2 id="how-to-measure-a-test-suite-quality">How to measure a test suite quality?</h2>

<p>The only reliable way to measure a test suite quality is to evaluate each test individually. The point is there is no
automated way to see how good your test suite. You have to apply your personal judgement.</p>

<p>The only point in having automated tests is if you constantly use them. All tests should be integrated into the
development cycle, you should execute them on every change, even the smallest one.</p>

<p>It’s important to direct your unit testing efforts to the most critical parts of the system and verify the others only
briefly or indirectly. In most applications, the most important part is the part that contains the business logic (The
Domain Model).</p>

<h2 id="whats-next">What’s next?</h2>

<p>The only way to achieve the goal of unit testing is to learn how to differentiate between a good and a bad test, and you
should be able to refactor the test to make it more valuable.</p>

<p>I’ll discuss testing more and more in the next articles. This series of articles are inspired by a list of books and
courses including:</p>

<ul>
  <li>TDD Tutorial by Laracasts.</li>
  <li>Unit testing Principles, Practices and Patterns.</li>
  <li>Effective Unit Testing, a guide for java developers.</li>
</ul>

<p><strong>Manténganse al tanto</strong></p>]]></content><author><name>Dhemy</name></author><category term="testing" /><summary type="html"><![CDATA[Well, It’s not about Coronavirus pandemic this time 😷. Moisés Belchín Martínez (Moi), my awesome ex-CTO, keeps repeating these words in every PR “We need more tests”. Sometimes it appears as a joke about Covid-19, but I believe he totally meant it.]]></summary></entry><entry><title type="html">PHP Real-world use cases of singleton design pattern</title><link href="https://imdhemy.com/blog/php/real-world-use-cases-of-sinlgeton-in-php.html" rel="alternate" type="text/html" title="PHP Real-world use cases of singleton design pattern" /><published>2021-12-30T12:45:00+00:00</published><updated>2021-12-30T12:45:00+00:00</updated><id>https://imdhemy.com/blog/php/real-world-use-cases-of-sinlgeton-in-php</id><content type="html" xml:base="https://imdhemy.com/blog/php/real-world-use-cases-of-sinlgeton-in-php.html"><![CDATA[<p>The singleton pattern ensures that a class has only one instance and provides global access to it. Okay, many developers consider the singleton is an anti-pattern and many others don’t. The most common reason for using a singleton is to control access to some shared resources, database connection which is an expensive resource or a file.</p>

<p><strong>The singleton pattern is responsible for:</strong></p>
<ul>
  <li>Creating an instance of its class.</li>
  <li>Ensures that a class has just a single instance.</li>
</ul>

<p>This obviously violates the Single Responsibility Principle, as the pattern solves two problems at the same time.</p>

<p>In the following lines, I’ll start by explaining <strong>how to implement a singleton</strong>, then I’ll discuss how <strong>Laravel Container</strong> uses the singleton pattern, Finally, show you how the Local Adapter within <strong>Flysystem</strong> PHP package uses the same concept to manipulate files.</p>

<h2 id="how-to-implement-a-singleton">How to implement a singleton</h2>
<p>The Singleton class declares the static method <code class="language-plaintext highlighter-rouge">getInstance</code> that returns the same instance of its class. To do so, we declare a static private property that holds the instance. By checking its value we can decide whether to create a new instance or return the already instantiated one. The Singleton <code class="language-plaintext highlighter-rouge">constructor</code> should be hidden from the client code. Calling the <code class="language-plaintext highlighter-rouge">getInstance</code> method should be the only way to create an instance of the Singleton class. Cloning the object should be prevented as well.</p>

<p><strong>I start by writing tests…</strong></p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//SingletonTest.php
<span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Tests</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Com\Imdhemy\Singleton</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Error</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">SingletonTest</span> <span class="kd">extends</span> <span class="nc">TestCase</span>
<span class="p">{</span>
    <span class="cd">/**
     * @test
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">it_can_be_instantiated_by_a_static_factory_method</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$instance</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">::</span><span class="nf">getInstance</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertInstanceOf</span><span class="p">(</span><span class="nc">Singleton</span><span class="o">::</span><span class="n">class</span><span class="p">,</span> <span class="nv">$instance</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @test
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">it_must_return_the_same_instance_every_time</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$firstCall</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">::</span><span class="nf">getInstance</span><span class="p">();</span>
        <span class="nv">$secondCall</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">::</span><span class="nf">getInstance</span><span class="p">();</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertSame</span><span class="p">(</span><span class="nv">$firstCall</span><span class="p">,</span> <span class="nv">$secondCall</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @test
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">it_should_not_be_instantiated_through_a_constructor</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">expectException</span><span class="p">(</span><span class="nc">Error</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>
        <span class="k">new</span> <span class="nc">Singleton</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @test
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">it_should_not_be_cloned</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">expectException</span><span class="p">(</span><span class="nc">Error</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>
        <span class="nv">$instance</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">::</span><span class="nf">getInstance</span><span class="p">();</span>
        <span class="k">clone</span> <span class="nv">$instance</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>And here is the Singleton class code…</strong></p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Singleton.php
<span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Com\Imdhemy</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Singleton</span>
<span class="p">{</span>
    <span class="cd">/**
     * @var Singleton|null
     */</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">?Singleton</span> <span class="nv">$instance</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="cd">/**
     * Singleton constructor
     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">//</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Prevents Cloning
     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="n">__clone</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="c1">//</span>
    <span class="p">}</span>

    <span class="cd">/**
     * @return Singleton
     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="n">getInstance</span><span class="p">():</span> <span class="kt">Singleton</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="nv">$instance</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">static</span><span class="o">::</span><span class="nv">$instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">static</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="nv">$instance</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="why-laravel-container-is-a-special-singleton-class">Why Laravel Container is a special singleton class</h2>
<p>If you checked the <a href="https://github.com/laravel/framework/blob/8.x/src/Illuminate/Foundation/Application.php#L29">Laravel source code</a>, you will find that the <code class="language-plaintext highlighter-rouge">Application</code> class extends the <code class="language-plaintext highlighter-rouge">Container</code> class. The latter is a special singleton implementation. It makes sense to have a single instance of the application within your application.</p>

<p>You can easily find the <code class="language-plaintext highlighter-rouge">getInstance</code> <a href="https://github.com/laravel/framework/blob/8.x/src/Illuminate/Container/Container.php#L1382-L1389">method on the Container class</a>, but if you checked the container constructor, you <strong>will not</strong> find a private constructor. This is why I’m saying that the Laravel Container is a special singleton. It’s implemented in a way that gains the pros of a Singleton and avoids the cons.</p>

<p>Laravel developers are smart enough to realize that <em>it’s completely fine to have a single object within your application, but it’s not fine to make it impossible to make a second instance</em>.</p>

<h2 id="a-single-instance-of-a-file-counts-as-a-singleton">A single instance of a file counts as a singleton</h2>

<p>The term Singleton comes from mathematics. In mathematics, a Singleton, also known as a unit set, is a set with exactly one element. For example, the set <code class="language-plaintext highlighter-rouge">{M}</code> is a singleton containing the element <code class="language-plaintext highlighter-rouge">M</code>.</p>

<p>Let’s imagine the situation when a particular part of your application code is manipulating the contents of a local file, and another part is updating the same file simultaneously! For instance, the first one is adding to the file, and the other one is removing lines from there! Definitely, this will result in inconsistent file contents.</p>

<p>As a solution, we need to ensure having a single instance of the file resource on our application during manipulation. Actually this is not a singleton class implementation, but it still implies the mathematics definition of a singleton.</p>

<p>The wonderful <a href="https://github.com/thephpleague/flysystem">Flysystem</a> PHP package provides one interface to interact with many types of filesystems.</p>

<p>Flysystem ships with a default adapter, which is the Local adapter. By default, this adapter <a href="https://github.com/thephpleague/flysystem/blob/2.x/src/Local/LocalFilesystemAdapter.php#L87">uses a lock</a> during writes and updates.</p>

<h2 id="summary">Summary</h2>

<p>Singleton is a creational design pattern, which ensures that only one object of its kind exists and provides a single point of access to it for any other code.</p>

<p>I’d prefer to assign the responsibility of ensuring having only one object to another Class or helper or at least do the same as Laravel developers did, and I’d also avoid hiding the constructor.</p>

<p>It’s completely fine to have a single object within your application, but it’s not fine to make it impossible to make a second instance.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[The singleton pattern ensures that a class has only one instance and provides global access to it. Okay, many developers consider the singleton is an anti-pattern and many others don’t. The most common reason for using a singleton is to control access to some shared resources, database connection which is an expensive resource or a file.]]></summary></entry></feed>