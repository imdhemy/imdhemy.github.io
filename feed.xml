<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://imdhemy.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://imdhemy.com/" rel="alternate" type="text/html" /><updated>2024-10-27T16:42:59+00:00</updated><id>https://imdhemy.com/feed.xml</id><title type="html">Imdhemy</title><subtitle>I&apos;m a software artist, fullstack (BE heavy) with 10+ years of experience in software development. 
Passionate about open source, blogging, and reading.
</subtitle><author><name>Dhemy</name></author><entry><title type="html">HTTP Client Factory Code Refactoring</title><link href="https://imdhemy.com/blog/dev-log/http-client-factory-code-refactoring.html/" rel="alternate" type="text/html" title="HTTP Client Factory Code Refactoring" /><published>2024-10-27T00:00:00+00:00</published><updated>2024-10-27T00:00:00+00:00</updated><id>https://imdhemy.com/blog/dev-log/http-client-factory-code-refactoring</id><content type="html" xml:base="https://imdhemy.com/blog/dev-log/http-client-factory-code-refactoring.html/"><![CDATA[<p>I’m working on a Proxy/Adapter project, which we’ll call “Banana.” Banana is developed in TypeScript and uses Axios for
HTTP requests. It’s designed to communicate with different APIs, each with distinct authentication methods and
configurations.</p>

<p>The system started with a single API, “PeelAPI,” for which we provided a <code class="language-plaintext highlighter-rouge">createClient</code> function that returned an Axios
instance with the correct configuration. When we added a second API, “BunchAPI,” we created another <code class="language-plaintext highlighter-rouge">createClient</code>
function for it, but in a different subdomain. The same was done for the third API, “SplitAPI.” For each Axios instance,
we wrapped errors in a custom error class to identify the source of the error, accomplished by a response interceptor.</p>

<div class="tip">
  <p>One API, one <code class="language-plaintext highlighter-rouge">createClient</code>—simple, right? Fast forward to three APIs, and now it’s like juggling bananas 🍌🍌🍌 with TypeScript.</p>
</div>

<p>The issue is that we now have a lot of duplicated code, and the <code class="language-plaintext highlighter-rouge">createClient</code> functions break the Single Responsibility
Principle, as they are responsible for both creating the client and handling authentication. I’m uncertain whether it’s
best to keep error wrapping within the same function or move it to a separate module after the client is created.</p>

<p>To add complexity, since client tokens are cached in Redis, we need to pass the Cache service to the <code class="language-plaintext highlighter-rouge">createClient</code>
function, although not all clients require token caching. This results in different signatures for each <code class="language-plaintext highlighter-rouge">createClient</code>
function.</p>

<p>I’m considering using a Factory pattern for client creation. The plan is to unify or standardize the client creation
functions so they have a consistent signature, allowing us to replace them with a single Factory function that creates
clients based on configuration.</p>

<p>I discovered that <code class="language-plaintext highlighter-rouge">baseURL</code> is the only configuration that varies between clients so far. I’m unsure whether it’s best
to accept a configuration object or just <code class="language-plaintext highlighter-rouge">baseURL</code> as a parameter. I chose <code class="language-plaintext highlighter-rouge">baseURL</code>, as it’s easier to handle only when
needed than creating a configuration object with a single property.</p>

<p>Last week, I began refactoring the “PeelAPI” client and ended up with a <code class="language-plaintext highlighter-rouge">createClient(baseURL: string): AxiosInstance</code>
function, which returns an Axios instance with the correct configuration. I then moved on to “BunchAPI,” which was less
straightforward because, unlike “PeelAPI,” “BunchAPI” requires authentication. I had to extract the authentication logic
into a separate function. I didn’t change the signature of the <code class="language-plaintext highlighter-rouge">createClient</code> function, planning to address that in the
next merge request.</p>

<div class="tip">
  <p>Once standardized, Factory Pattern will take the wheel. But the question remains: what’s the cleanest way to handle authentication? 🤔 #CodeDesign</p>
</div>

<p>The first merge request is already merged, but I’m waiting for the second one to be reviewed. Once it’s merged, I will
standardize the <code class="language-plaintext highlighter-rouge">createClient</code> functions, ensuring that the first two API clients have a consistent signature. Then, the
third API client will be refactored in two steps: first to address authentication, then to standardize the signature.</p>

<p>After all <code class="language-plaintext highlighter-rouge">createClient</code> functions are standardized, I’ll create the Factory function to generate clients based on
configuration. I still need to determine a clean way to handle authentication. Do you have any suggestions?</p>]]></content><author><name>Dhemy</name></author><category term="dev-log" /><summary type="html"><![CDATA[I’m working on a Proxy/Adapter project, which we’ll call “Banana.” Banana is developed in TypeScript and uses Axios for HTTP requests. It’s designed to communicate with different APIs, each with distinct authentication methods and configurations.]]></summary></entry><entry><title type="html">Better alternatives to empty() in PHP</title><link href="https://imdhemy.com/blog/php/better-alternatives-to-empty-in-php.html/" rel="alternate" type="text/html" title="Better alternatives to empty() in PHP" /><published>2024-07-19T00:00:00+00:00</published><updated>2024-07-19T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/better-alternatives-to-empty-in-php</id><content type="html" xml:base="https://imdhemy.com/blog/php/better-alternatives-to-empty-in-php.html/"><![CDATA[<p>I’m working on a weekend project: a <a href="https://github.com/symblaze/mare-scan">static code analysis tool</a> for PHP, just
because, well, why not? So, I’ve been learning more about PHP’s internals and quirks. I used to use the <code class="language-plaintext highlighter-rouge">empty()</code>
function to check if a variable was empty, especially strings and arrays. But recently, I learned why using it can be a
bad idea. In this blog post, I’ll share why we should stop using <code class="language-plaintext highlighter-rouge">empty()</code> and look at better alternatives.</p>

<h2 id="what-does-empty-do">What does <code class="language-plaintext highlighter-rouge">empty()</code> do?</h2>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">empty</span><span class="p">(</span><span class="n">mixed</span> <span class="nv">$var</span><span class="p">)</span><span class="o">:</span> <span class="n">bool</span>
</code></pre></div></div>

<p>By checking the <a href="https://www.php.net/manual/en/function.empty.php">PHP manual</a>, you will find:</p>

<blockquote>
  <p>Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its
value equals false.</p>
</blockquote>

<p>Let’s have a look at the following examples:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">empty</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span> <span class="c1">// true</span>
<span class="k">empty</span><span class="p">(</span><span class="s1">''</span><span class="p">);</span> <span class="c1">// true</span>
<span class="k">empty</span><span class="p">([]);</span> <span class="c1">// true</span>
</code></pre></div></div>

<p>I used to think <code class="language-plaintext highlighter-rouge">empty()</code> always behaves like in these examples, but that’s not the reality!</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">empty</span><span class="p">(</span><span class="s1">'0'</span><span class="p">);</span> <span class="c1">// true (huh?) // Technically, '0' is not an empty string.</span>
<span class="k">empty</span><span class="p">(</span><span class="k">new</span> <span class="nc">ArrayObject</span><span class="p">());</span> <span class="c1">// false (Huh! It's already empty!)</span>
</code></pre></div></div>

<p>Surprise! <code class="language-plaintext highlighter-rouge">empty()</code> is doing a loose comparison with <code class="language-plaintext highlighter-rouge">false</code></p>

<table>
  <thead>
    <tr>
      <th><code class="language-plaintext highlighter-rouge">$value</code></th>
      <th><code class="language-plaintext highlighter-rouge">== false</code></th>
      <th><code class="language-plaintext highlighter-rouge">empty($value)</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">null</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">''</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">[]</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><strong>Observe the following</strong></td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">'0'</code></td>
      <td>true</td>
      <td>true</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">new ArrayObject()</code></td>
      <td>false</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<p>Not only that! But <code class="language-plaintext highlighter-rouge">empty()</code> also doesn’t throw a warning if the variable does not exist. That means <code class="language-plaintext highlighter-rouge">empty()</code> is
equivalent to <code class="language-plaintext highlighter-rouge">!isset($value) || $value == false</code>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">is_empty</span><span class="p">(</span><span class="nv">$value</span><span class="p">):</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$value</span> <span class="o">==</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In case you mistyped the variable name, your code will not complain about it.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$type</span> <span class="o">=</span> <span class="s1">'car'</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$typo</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Laterally THIS IS A TYPO</span>
    <span class="k">echo</span> <span class="s1">'This should not be printed'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The above code will print the message without any warnings or errors, even though the developer intended to check
the <code class="language-plaintext highlighter-rouge">type</code> variable length.</p>

<h2 id="better-alternatives-to-empty">Better alternatives to <code class="language-plaintext highlighter-rouge">empty()</code></h2>

<p>It depends on the context and the data type you are working with. Here are some alternatives:</p>

<h3 id="strings">Strings</h3>

<p>You can directly compare the string with an empty string.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="s1">''</span> <span class="o">===</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="arrays">Arrays</h3>

<p>You can compare with an empty array.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">([]</span> <span class="o">===</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Do something</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Or you can use the <code class="language-plaintext highlighter-rouge">count()</code> function.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$value</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// Do something</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Comparing with an empty array is more readable than using the <code class="language-plaintext highlighter-rouge">count()</code> function. I wanted to be sure about the
performance difference between them, so I wrote a simple benchmark to compare how long it takes to execute each one on
an empty array and an array with <code class="language-plaintext highlighter-rouge">1000000</code> elements, and here are the results:</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Empty Array Time (seconds)</th>
      <th>Large Array Time (seconds)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkWithCount</code></td>
      <td>0.21758413314819</td>
      <td>0.2175669670105</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">checkWithDirectComparison</code></td>
      <td>0.21403312683105</td>
      <td>0.21817898750305</td>
    </tr>
  </tbody>
</table>

<p>Based on these results, there is no significant performance difference between the two methods for both empty and large
arrays. However, from a code readability and directness perspective, using <code class="language-plaintext highlighter-rouge">if ([] === $value)</code> may still be preferred.</p>

<h2 id="more-thoughts">More thoughts</h2>

<p>Because <code class="language-plaintext highlighter-rouge">empty()</code> accepts any variable type, you may come across usages with Objects, integers and floats. I can’t
picture a developer will need to check if an integer value is empty, maybe they want to check if it’s zero. You got the
point! For that reason, I didn’t provide alternatives for these types.</p>

<p>The <code class="language-plaintext highlighter-rouge">empty()</code> is not working as expected with magic classes. I also omitted adding alternatives for them because we
should avoid using magic methods in the first place, but if you are interested, you can check the following:</p>

<p>Suppose we have a regular class:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">RegularClass</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nv">$property</span> <span class="o">=</span> <span class="s1">'value'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And another magic class with dynamic properties:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MagicClass</span> <span class="p">{</span>
   <span class="k">private</span> <span class="nv">$properties</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'property'</span> <span class="o">=&gt;</span> <span class="s1">'value'</span><span class="p">];</span>
   
    <span class="k">public</span> <span class="k">function</span> <span class="n">__get</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">properties</span><span class="p">[</span><span class="nv">$name</span><span class="p">]</span> <span class="o">??</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now let’s create an instance of each class and check if the property is empty:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$regular</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RegularClass</span><span class="p">();</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$regular</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">);</span> <span class="c1">// string(5) "value"</span>

<span class="nv">$magic</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MagicClass</span><span class="p">();</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$magic</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">);</span> <span class="c1">// string(5) "value"</span>

<span class="c1">// Now let's check if the property is empty</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$regular</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">));</span> <span class="c1">// false</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$magic</span><span class="o">-&gt;</span><span class="n">property</span><span class="p">));</span> <span class="c1">// true (Huh!)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p><code class="language-plaintext highlighter-rouge">empty()</code> is not as straightforward as I thought. It’s better to avoid using it and use the alternatives I mentioned
above. It’s always better to be explicit in your code and avoid any surprises.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[I’m working on a weekend project: a static code analysis tool for PHP, just because, well, why not? So, I’ve been learning more about PHP’s internals and quirks. I used to use the empty() function to check if a variable was empty, especially strings and arrays. But recently, I learned why using it can be a bad idea. In this blog post, I’ll share why we should stop using empty() and look at better alternatives.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/desert.jpg" /><media:content medium="image" url="https://imdhemy.com/assets/img/desert.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Singleton Design Pattern in Laravel</title><link href="https://imdhemy.com/blog/php/singleton-design-pattern-in-laravel.html/" rel="alternate" type="text/html" title="Singleton Design Pattern in Laravel" /><published>2024-04-15T06:05:51+00:00</published><updated>2024-04-15T06:05:51+00:00</updated><id>https://imdhemy.com/blog/php/singleton-design-pattern-in-laravel</id><content type="html" xml:base="https://imdhemy.com/blog/php/singleton-design-pattern-in-laravel.html/"><![CDATA[<p>Google search console told me that I got some visits from people searching for “Singleton Design Pattern in Laravel”.
But they landed on my <a href="/blog/php/real-world-use-cases-of-sinlgeton-in-php.html/">PHP Real-world use cases of singleton design pattern</a> post. So I decided to make them happy with a dedicated post
about Singleton Design Pattern in Laravel.</p>

<p>In the mentioned post, I explained the Singleton Design Pattern in PHP, how to implement it, how to test it, and some
real-world use cases. If you are not familiar with this pattern, you can check it out.</p>

<h2 id="why-would-you-use-singleton-design-pattern">Why would you use Singleton Design Pattern?</h2>

<p>A perfect use case for the Singleton is a FileSystem class. You want to perform file operations in your application, and
you want to use the same instance of the FileSystem class everywhere in your application. It’s impossible to depend on
the constructors to get the same instance of the FileSystem, that’s where the Singleton Design Pattern comes in.</p>

<p>It may look unnecessary to use the Singleton Design pattern in PHP because each request is a new instance of the
application and all instances are destroyed after the request is done. But you get more benefits from it using it in
something like a Queue worker or a Laravel Octane server.</p>

<h2 id="some-laravel-binding-basics">Some Laravel Binding basics</h2>

<p>Before we create our Laravel Singleton, let’s understand some Laravel binding basics. The Laravel service container is a
powerful tool for managing class dependencies and performing dependency injection. Binding is the process of defining
how the container should resolve a class or an interface. Most of the time you don’t need to instruct the container how
to resolve your dependencies, but sometimes you do.</p>

<p>To bind a class into the container, you can use the <code class="language-plaintext highlighter-rouge">bind()</code> method inside one of the service providers. The following
example binds a <code class="language-plaintext highlighter-rouge">Foo</code> class. We can use the <code class="language-plaintext highlighter-rouge">\App\Providers\AppServiceProvider</code> for this.</p>

<p>Let’s assume we have a <code class="language-plaintext highlighter-rouge">Foo</code> class that can tell us when it was created.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="n">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="kn">namespace</span> <span class="nn">App</span><span class="p">;</span>

<span class="k">final</span> <span class="k">readonly</span> <span class="kd">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="k">public</span> <span class="kt">int</span> <span class="nv">$createdAt</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can bind the <code class="language-plaintext highlighter-rouge">Foo</code> class to the container.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">App\Providers</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Foo</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Support\ServiceProvider</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">AppServiceProvider</span> <span class="kd">extends</span> <span class="nc">ServiceProvider</span>
<span class="p">{</span>
    <span class="cd">/**
     * Register any application services.
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">register</span><span class="p">():</span> <span class="kt">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">app</span><span class="o">-&gt;</span><span class="nf">bind</span><span class="p">(</span><span class="nc">Foo</span><span class="o">::</span><span class="n">class</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">time</span><span class="p">());</span>
        <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="c1">// .. other methods</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can resolve the <code class="language-plaintext highlighter-rouge">Foo</code> class from the container.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">use</span> <span class="nc">App\Foo</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Support\Facades\Route</span><span class="p">;</span>

<span class="nc">Route</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Foo</span> <span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">return</span> <span class="nv">$foo</span><span class="o">-&gt;</span><span class="n">createdAt</span><span class="p">;</span>
<span class="p">});</span>

</code></pre></div></div>

<p>Now if you visited your home page, you can see the timestamp when the <code class="language-plaintext highlighter-rouge">Foo</code> class was created, Something like this</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1713182568
</code></pre></div></div>

<h2 id="binding-a-singleton">Binding a Singleton</h2>

<p>The <code class="language-plaintext highlighter-rouge">singleton</code> method binds a class or interface into the container that should only be resolved one time. Once a
singleton binding is resolved, the same object instance will be returned on subsequent calls into the container. To see
it in action, let’s change our <code class="language-plaintext highlighter-rouge">Foo</code> example to a Singleton.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// app/Providers/AppServiceProvider.php
<span class="err">
</span>    public function register(): void
    {   
<span class="gd">-       $this-&gt;app-&gt;bind(Foo::class, function () {
</span><span class="gi">+       $this-&gt;app-&gt;singleton(Foo::class, function () {
</span>            return new Foo(time());
        });
    }
<span class="err">
</span></code></pre></div></div>

<p>Now, let’s create two instances of the <code class="language-plaintext highlighter-rouge">Foo</code> class in our route.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// routes/web.php</span>

<span class="kn">use</span> <span class="nc">App\Foo</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Support\Facades\Route</span><span class="p">;</span>

<span class="nc">Route</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="k">static</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nv">$firstCall</span> <span class="o">=</span> <span class="nf">app</span><span class="p">(</span><span class="nc">Foo</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

  <span class="c1">// Simulate a delay</span>
  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

  <span class="nv">$secondCall</span> <span class="o">=</span> <span class="nf">app</span><span class="p">(</span><span class="nc">Foo</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>

  <span class="k">return</span> <span class="nf">response</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">json</span><span class="p">([</span>
        <span class="s1">'first_call'</span> <span class="o">=&gt;</span> <span class="nv">$firstCall</span><span class="o">-&gt;</span><span class="n">createdAt</span><span class="p">,</span>
        <span class="s1">'second_call'</span> <span class="o">=&gt;</span> <span class="nv">$secondCall</span><span class="o">-&gt;</span><span class="n">createdAt</span><span class="p">,</span>
        <span class="s1">'is_same_instance'</span> <span class="o">=&gt;</span> <span class="nv">$firstCall</span> <span class="o">===</span> <span class="nv">$secondCall</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The response should be something like this</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"first_call"</span><span class="p">:</span><span class="w"> </span><span class="mi">1713183052</span><span class="p">,</span><span class="w">
  </span><span class="nl">"second_call"</span><span class="p">:</span><span class="w"> </span><span class="mi">1713183052</span><span class="p">,</span><span class="w">
  </span><span class="nl">"is_same_instance"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>As you can see, the <code class="language-plaintext highlighter-rouge">first_call</code> and <code class="language-plaintext highlighter-rouge">second_call</code> are the same, and the <code class="language-plaintext highlighter-rouge">is_same_instance</code> is <code class="language-plaintext highlighter-rouge">true</code>. Try to replace
the <code class="language-plaintext highlighter-rouge">singleton</code> with <code class="language-plaintext highlighter-rouge">bind</code> and see the difference.</p>

<h2 id="two-types-of-singletons-binding-in-laravel">Two types of Singletons binding in Laravel</h2>

<p>We have already tried the <code class="language-plaintext highlighter-rouge">singleton()</code> method, but there is another way to bind a Singleton in Laravel. The Scoped
Bindings. The <code class="language-plaintext highlighter-rouge">scoped()</code> method binds a class or interface into the container that should only be resolved one time
within a given Laravel request / job lifecycle. While this method is similar to the singleton method, instances
registered using the scoped method will be flushed whenever the Laravel application starts a new “lifecycle”, such as
when a Laravel Octane worker processes a new request or when a Laravel queue worker processes a new job:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// app/Providers/AppServiceProvider.php
<span class="err">
</span>    public function register(): void
    {   
<span class="gd">-       $this-&gt;app-&gt;singleton(Foo::class, function () {
</span><span class="gi">+       $this-&gt;app-&gt;scoped(Foo::class, function () {
</span>            return new Foo(time());
        });
    }
<span class="err">
</span></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Laravel offers two types of Singleton bindings, the <code class="language-plaintext highlighter-rouge">singleton()</code> and the <code class="language-plaintext highlighter-rouge">scoped()</code>, each with its own use cases and
lifecycle.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Google search console told me that I got some visits from people searching for “Singleton Design Pattern in Laravel”. But they landed on my PHP Real-world use cases of singleton design pattern post. So I decided to make them happy with a dedicated post about Singleton Design Pattern in Laravel.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/stay_single.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/stay_single.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to avoid boilerplate code in Symfony Voters</title><link href="https://imdhemy.com/blog/php/how-to-avoid-boilerplate-code-in-symfony-voters.html/" rel="alternate" type="text/html" title="How to avoid boilerplate code in Symfony Voters" /><published>2024-04-03T00:00:00+00:00</published><updated>2024-04-03T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/how-to-avoid-boilerplate-code-in-symfony-voters</id><content type="html" xml:base="https://imdhemy.com/blog/php/how-to-avoid-boilerplate-code-in-symfony-voters.html/"><![CDATA[<p>Symfony voters are the way to go when you need to centralize the authorization logic of your application. There have
been multiple trials to improve the way we write voters, one of them was by introducing the <code class="language-plaintext highlighter-rouge">AbstractVoter</code> class in
<a href="https://symfony.com/blog/new-in-symfony-2-6-simpler-security-voters">Symfony 2.6</a>. Later on, it was deprecated in
<a href="https://symfony.com/blog/new-in-symfony-2-8-simpler-security-voters">Symfony 2.8</a> to be removed in v3.0 with the
introduction of the <code class="language-plaintext highlighter-rouge">Voter</code>class. The continuous improvement didn’t stop there, and I believe it will not.</p>

<p>In this post, I will contribute to the trials of improving the way we write voters by introducing the <code class="language-plaintext highlighter-rouge">CanDoVoter</code>.</p>

<h2 id="the-problem">The problem</h2>

<p>Suppose the logic to decide whether a user can <code class="language-plaintext highlighter-rouge">view</code> or <code class="language-plaintext highlighter-rouge">edit</code> a <code class="language-plaintext highlighter-rouge">Post</code> object is pretty complex. For example, a User
can always edit or view a Post they created. And if a Post is marked as “public”, anyone can view it. We can write
a <code class="language-plaintext highlighter-rouge">PostVoter</code> to handle this logic.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//src/Acme/Post/PostVoter.php</span>
<span class="kn">namespace</span> <span class="nn">App\Acme\Post</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Post</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">PostVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>   
    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="p">[</span><span class="s1">'get'</span><span class="p">,</span> <span class="s1">'update'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$subject</span> <span class="k">instanceof</span> <span class="nc">Post</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$user</span> <span class="k">instanceof</span> <span class="nc">User</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// This means if the user is not logged in, they can't view or edit the post</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$post</span> <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>
        <span class="nb">assert</span><span class="p">(</span><span class="nv">$post</span> <span class="k">instanceof</span> <span class="nc">Post</span><span class="p">);</span>
        
        <span class="c1">// The user can always edit or view a post they created</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$user</span> <span class="o">===</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">getAuthor</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="c1">// If the post is public, anyone can view it</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$attribute</span> <span class="o">===</span> <span class="s1">'get'</span> <span class="o">&amp;&amp;</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">isPublic</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="c1">// otherwise, the user can't view or edit the post</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, suppose we have another entity, <code class="language-plaintext highlighter-rouge">Comment</code>, and we need to write a <code class="language-plaintext highlighter-rouge">CommentVoter</code> to handle the logic of whether
a user can perform some actions on a <code class="language-plaintext highlighter-rouge">Comment</code> object. We will end up repeating a similar code in <code class="language-plaintext highlighter-rouge">supports()</code> and
the beginning of <code class="language-plaintext highlighter-rouge">voteOnAttribute()</code> methods till we get the <code class="language-plaintext highlighter-rouge">user</code> and <code class="language-plaintext highlighter-rouge">subject</code> objects.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//src/Acme/Comment/CommentVoter.php</span>

<span class="kn">namespace</span> <span class="nn">App\Acme\Comment</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Comment</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">CommentVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="p">[</span><span class="s1">'get'</span><span class="p">,</span> <span class="s1">'update'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$subject</span> <span class="k">instanceof</span> <span class="nc">Comment</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$user</span> <span class="k">instanceof</span> <span class="nc">User</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$comment</span> <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>

        <span class="c1">// Do the logic here</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="avoiding-the-repeated-code-in-the-supports">Avoiding the repeated code in the supports()</h2>

<p>The first step is to avoid the repeated code in the <code class="language-plaintext highlighter-rouge">supports()</code> method. The <code class="language-plaintext highlighter-rouge">supports()</code> method goal is to check if the
voter supports the given attribute and subject. We can extract them to configuration properties.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Foundation\Security</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CanDoVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>
    <span class="cd">/**
     * @var string[] the attributes that this voter supports
     */</span>
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$supportedAttributes</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="cd">/**
     * @var class-string the subject that this voter supports
     */</span>
    <span class="k">protected</span> <span class="kt">string</span> <span class="nv">$supportedClass</span><span class="p">;</span>
    
    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedAttributes</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">is_a</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedClass</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="avoiding-the-repeated-code-in-the-voteonattribute">Avoiding the repeated code in the voteOnAttribute()</h2>

<p>The <code class="language-plaintext highlighter-rouge">voteOnAttribute()</code> should perform the actual voting logic to decide whether the user can perform the given
attribute on the given subject. To do so, we need to get the <code class="language-plaintext highlighter-rouge">user</code> and <code class="language-plaintext highlighter-rouge">subject</code> objects. We can extract this code
as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Foundation\Security</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CanDoVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>
    <span class="c1">// The supports() method is removed for brevity</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$method</span> <span class="o">=</span> <span class="s1">'can'</span><span class="mf">.</span><span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">);</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$user</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$vote</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$method</span><span class="p">(</span><span class="nv">$user</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">);</span>
        <span class="nb">assert</span><span class="p">(</span><span class="nb">is_bool</span><span class="p">(</span><span class="nv">$vote</span><span class="p">));</span>

        <span class="k">return</span> <span class="nv">$vote</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Based on the <code class="language-plaintext highlighter-rouge">voteOnAttribute()</code> implementation, we need to define a method for each supported attribute. The method
name should be <code class="language-plaintext highlighter-rouge">can</code> followed by the attribute name with the first letter capitalized. For example, if the supported
attributes are <code class="language-plaintext highlighter-rouge">['get', 'update']</code>, we should define <code class="language-plaintext highlighter-rouge">canGet()</code> and <code class="language-plaintext highlighter-rouge">canUpdate()</code> methods. The <code class="language-plaintext highlighter-rouge">user</code> is passed as the
first argument, and the <code class="language-plaintext highlighter-rouge">subject</code> is passed as the second argument.</p>

<h2 id="introducing-the-candovoter">Introducing the CanDoVoter</h2>

<p>A final version of the <code class="language-plaintext highlighter-rouge">CanDoVoter</code> class is as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Foundation\Security</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CanDoVoter</span> <span class="kd">extends</span> <span class="nc">Voter</span>
<span class="p">{</span>   
    <span class="k">public</span> <span class="k">const</span> <span class="no">LIST</span> <span class="o">=</span> <span class="s1">'list'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">GET</span> <span class="o">=</span> <span class="s1">'get'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">CREATE</span> <span class="o">=</span> <span class="s1">'create'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">UPDATE</span> <span class="o">=</span> <span class="s1">'update'</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="no">DELETE</span> <span class="o">=</span> <span class="s1">'delete'</span><span class="p">;</span>
    
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$supportedAttributes</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">protected</span> <span class="kt">string</span> <span class="nv">$supportedClass</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">supports</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedAttributes</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">is_a</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">supportedClass</span><span class="p">,</span> <span class="kc">true</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">voteOnAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="kt">mixed</span> <span class="nv">$subject</span><span class="p">,</span> <span class="kt">TokenInterface</span> <span class="nv">$token</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="nv">$method</span> <span class="o">=</span> <span class="s1">'can'</span><span class="mf">.</span><span class="nb">ucfirst</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">);</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">getUser</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$user</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$vote</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$method</span><span class="p">(</span><span class="nv">$user</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">);</span>
        <span class="nb">assert</span><span class="p">(</span><span class="nb">is_bool</span><span class="p">(</span><span class="nv">$vote</span><span class="p">));</span>

        <span class="k">return</span> <span class="nv">$vote</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="using-the-candovoter">Using the CanDoVoter</h2>

<p>Now, we can use the <code class="language-plaintext highlighter-rouge">CanDoVoter</code> to write the <code class="language-plaintext highlighter-rouge">PostVoter</code> as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Acme\Post</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Post</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Domain\Entity\User</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Foundation\Security\CanDoVoter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">PostVoter</span> <span class="kd">extends</span> <span class="nc">CanDoVoter</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$supportedAttributes</span> <span class="o">=</span> <span class="p">[</span><span class="k">self</span><span class="o">::</span><span class="no">GET</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="no">UPDATE</span><span class="p">];</span>
    <span class="k">protected</span> <span class="kt">string</span> <span class="nv">$supportedClass</span> <span class="o">=</span> <span class="nc">Post</span><span class="o">::</span><span class="n">class</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">canGet</span><span class="p">(</span><span class="kt">User</span> <span class="nv">$user</span><span class="p">,</span> <span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>   
        <span class="k">if</span> <span class="p">(</span><span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">isPublic</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span> <span class="o">===</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">getAuthor</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="n">canUpdate</span><span class="p">(</span><span class="kt">User</span> <span class="nv">$user</span><span class="p">,</span> <span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$user</span> <span class="o">===</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">getAuthor</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And in your controller, you can use the voter as follows:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">namespace</span> <span class="nn">App\Controller</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">App\Domain\Entity\Post</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">App\Acme\Post\PostVoter</span><span class="p">;</span>

<span class="k">final</span> <span class="kd">class</span> <span class="nc">PostController</span> <span class="kd">extends</span> <span class="nc">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">show</span><span class="p">(</span><span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">denyAccessUnlessGranted</span><span class="p">(</span><span class="nc">PostVoter</span><span class="o">::</span><span class="no">GET</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>
        
        <span class="c1">// The logic to show the post</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="n">update</span><span class="p">(</span><span class="kt">Post</span> <span class="nv">$post</span><span class="p">):</span> <span class="kt">Response</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">denyAccessUnlessGranted</span><span class="p">(</span><span class="nc">PostVoter</span><span class="o">::</span><span class="no">UPDATE</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>
        
        <span class="c1">// The logic to update the post</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="testing-the-candovoter">Testing the canDoVoter</h2>

<p>We have discussed before <a href="/blog/testing/how-to-organize-your-unit-tests.html/">how to organize our unit tests</a>.
It’s a good practice to write unit tests that document your business logic, and testing the interface is the way to go.
That means you should write your tests against the <code class="language-plaintext highlighter-rouge">vote()</code> method not the <code class="language-plaintext highlighter-rouge">can*()</code> methods. The <code class="language-plaintext highlighter-rouge">can*()</code> methods
should be <code class="language-plaintext highlighter-rouge">protected</code> methods, and you should not test them directly.</p>

<div class="tip">

  <p>Always test the public interface of your classes. In this case, the public interface is the <code class="language-plaintext highlighter-rouge">vote()</code> method.</p>

</div>

<p>Below is an example of how to test the <code class="language-plaintext highlighter-rouge">PostVoter</code>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">final</span> <span class="kd">class</span> <span class="nc">PostVoterTest</span> <span class="kd">extends</span> <span class="nc">TestCase</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="k">function</span> <span class="n">any_user_can_view_a_public_post</span><span class="p">():</span> <span class="kt">void</span> 
   <span class="p">{</span>
       <span class="c1">// Arrange</span>
       <span class="nv">$post</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Post</span><span class="p">();</span>
       <span class="nv">$post</span><span class="o">-&gt;</span><span class="nf">setPublic</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
       <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="p">();</span>
       <span class="nv">$token</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">createMock</span><span class="p">(</span><span class="nc">TokenInterface</span><span class="o">::</span><span class="n">class</span><span class="p">);</span>
       <span class="nv">$token</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(</span><span class="s1">'getUser'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">willReturn</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
       <span class="nv">$sut</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PostVoter</span><span class="p">();</span>
       
       <span class="c1">// Act</span>
       <span class="nv">$actual</span> <span class="o">=</span> <span class="nv">$sut</span><span class="o">-&gt;</span><span class="nf">vote</span><span class="p">(</span><span class="nv">$token</span><span class="p">,</span> <span class="nv">$post</span><span class="p">,</span> <span class="p">[</span><span class="nc">PostVoter</span><span class="o">::</span><span class="no">GET</span><span class="p">]);</span>
       
       <span class="c1">// Assert</span>
       <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">assertEquals</span><span class="p">(</span><span class="nc">Voter</span><span class="o">::</span><span class="no">ACCESS_GRANTED</span><span class="p">,</span> <span class="nv">$actual</span><span class="p">);</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Avoid test names like: <code class="language-plaintext highlighter-rouge">it_should_fail_when_the_user_is_not_the_author()</code>. Instead, use test names that describe the
behavior of the system under test.</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- it_should_fail_when_the_user_is_not_the_author()
</span><span class="err">
</span><span class="gi">+ only_the_author_can_update_the_post()
+ only_the_author_can_view_a_private_post()
+ any_user_can_view_a_public_post()
</span></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>You can have the <code class="language-plaintext highlighter-rouge">CanDoVoter</code> and much more out-of the box by using
the <a href="https://github.com/symblaze/security-bundle">Symblaze Security Bundle</a>.</p>

<p>In this post, we have introduced a new way to write Symfony voters with less boilerplate code, the <code class="language-plaintext highlighter-rouge">CanDoVoter</code>. The
<code class="language-plaintext highlighter-rouge">CanDoVoter</code> class is an abstract class that you can extend to write your voters. Improving the way we write voters
will make our codebase more maintainable and easier to read. I hope you find this post helpful, and I would love to
hear your feedback.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Symfony voters are the way to go when you need to centralize the authorization logic of your application. There have been multiple trials to improve the way we write voters, one of them was by introducing the AbstractVoter class in Symfony 2.6. Later on, it was deprecated in Symfony 2.8 to be removed in v3.0 with the introduction of the Voterclass. The continuous improvement didn’t stop there, and I believe it will not.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/vote.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/vote.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What Symfony developers should know before using Voters</title><link href="https://imdhemy.com/blog/php/what-symfony-developers-should-know-before-using-voters.html/" rel="alternate" type="text/html" title="What Symfony developers should know before using Voters" /><published>2024-04-02T00:00:00+00:00</published><updated>2024-04-02T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/what-symfony-developers-should-know-before-using-voters</id><content type="html" xml:base="https://imdhemy.com/blog/php/what-symfony-developers-should-know-before-using-voters.html/"><![CDATA[<p>Voters are Symfony’s most powerful way of managing permissions. They allow you to centralize all permission logic, then
reuse them in many places. In this post, We will cover some of the basics of Symfony’s security system that you
should know before using voters.</p>

<h2 id="permissions-should-be-linked-to-a-user">Permissions should be linked to a user</h2>

<p>In Symfony, permissions are always linked to a user object. If you need to secure parts of your application, you
need to create a user object that implements the <code class="language-plaintext highlighter-rouge">UserInterface</code>.</p>

<div class="tip">

  <p>Permissions should be linked to a user object. Always stick to this rule, even if you have an external user system</p>

</div>

<p>Some applications have an external SSO system that provides user information through an access token. Even in this case,
you should not depend directly on the access token to check permissions. Instead, you should create a user object that
implements the <code class="language-plaintext highlighter-rouge">UserInterface</code>. If you opt out of this approach, you will lose many benefits that you get from
Symfony’s security system.</p>

<h2 id="security-user-interface">Security User Interface</h2>

<p>The <code class="language-plaintext highlighter-rouge">UserInterface</code> provided by
the <a href="https://github.com/symfony/symfony/blob/923c4efa1df53e351aa52be1907191977cbf980f/src/Symfony/Component/Security/Core/User/UserInterface.php#L31">Symfony security component</a>
helps you to make sure that your user object has all the necessary methods to work with Symfony’s security system
regardless of how you load or create the user object, e.g., from a database, an API, or a Token.</p>

<div class="tip">

  <p>The security user interface is the contract between your user object and Symfony’s security system.</p>

</div>

<p>Let’s take a look at the <code class="language-plaintext highlighter-rouge">UserInterface</code>:</p>

<p>The first method is <code class="language-plaintext highlighter-rouge">getRoles()</code>. The name of the method is self-explanatory, it should return an array of roles for the
user. We will cover roles in the next section.</p>

<p>The second method is <code class="language-plaintext highlighter-rouge">eraseCredentials()</code>. This method is designed to clear any sensitive data that the user object
might be holding at any given point. For instance, clearing the plain text password after the user is authenticated.</p>

<p>The last method is <code class="language-plaintext highlighter-rouge">getUserIdentifier()</code>. This method should return the <strong>Public representation</strong> of a user e.g.,
the <code class="language-plaintext highlighter-rouge">username</code>. This method can be used by the user providers which helps you to get many benefits, like <a href="https://symfony.com/doc/current/security.html#fetching-the-user-from-a-service">fetching
the user object in your
service</a>, <a href="https://symfony.com/doc/current/security/impersonating_user.html">impersonating a user</a>,
etc.</p>

<h2 id="user-roles">User Roles</h2>

<p>When a user is authenticated, Symfony calls the <code class="language-plaintext highlighter-rouge">getRoles()</code> method on the user object to determine the roles of the
user. It doesn’t matter how the roles are stored in the database or how they are generated. The only thing that matters
is that every role must start with the <code class="language-plaintext highlighter-rouge">ROLE_</code> prefix - otherwise, things won’t work as expected. You will use these
roles to grant access to specific parts of your application.</p>

<div class="tip">

  <p>All roles should start with the <code class="language-plaintext highlighter-rouge">ROLE_</code> prefix. This is a requirement of Symfony’s security system.</p>

</div>

<p>Symfony provides a role hierarchy system out of the box. Instead of assigning multiple roles to a user, you can
configure a role hierarchy. This way, you can assign a single role to a user, and Symfony will automatically grant
access to all the roles in the hierarchy.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/packages/security.yaml</span>
<span class="na">security</span><span class="pi">:</span>
  <span class="c1"># ...</span>

  <span class="na">role_hierarchy</span><span class="pi">:</span>
    <span class="na">ROLE_MODERATOR</span><span class="pi">:</span> <span class="s">ROLE_USER</span>
    <span class="na">ROLE_ADMIN</span><span class="pi">:</span> <span class="s">ROLE_MODERATOR</span>
    <span class="na">ROLE_SUPER_ADMIN</span><span class="pi">:</span> <span class="s">ROLE_ADMIN</span>

</code></pre></div></div>

<p>Using the above configuration, if a user has the <code class="language-plaintext highlighter-rouge">ROLE_SUPER_ADMIN</code> role, Symfony will automatically grant access to
<code class="language-plaintext highlighter-rouge">ROLE_ADMIN</code>, <code class="language-plaintext highlighter-rouge">ROLE_MODERATOR</code>, and <code class="language-plaintext highlighter-rouge">ROLE_USER</code>. This is illustrated as follows:</p>

<p>The <code class="language-plaintext highlighter-rouge">ROLE_SUPER_ADMIN</code> role inherits the <code class="language-plaintext highlighter-rouge">ROLE_ADMIN</code> role, which inherits the <code class="language-plaintext highlighter-rouge">ROLE_MODERATOR</code> role, which inherits
the <code class="language-plaintext highlighter-rouge">ROLE_USER</code> role. It’s worth noting that a role can inherit multiple roles.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/packages/security.yaml</span>
<span class="na">security</span><span class="pi">:</span>
  <span class="c1"># ...</span>

  <span class="na">role_hierarchy</span><span class="pi">:</span>
    <span class="na">ROLE_ADMIN</span><span class="pi">:</span> <span class="s">ROLE_USER</span>
    <span class="na">ROLE_SUPER_ADMIN</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">ROLE_ADMIN</span><span class="pi">,</span> <span class="nv">ROLE_ALLOWED_TO_SWITCH</span> <span class="pi">]</span>
</code></pre></div></div>

<p>For role hierarchy to work, do not use <code class="language-plaintext highlighter-rouge">$user-&gt;getRoles()</code> manually, instead you should always depend on the
<code class="language-plaintext highlighter-rouge">isGranted()</code> or <code class="language-plaintext highlighter-rouge">denyAccessUnlessGranted()</code> methods provided by the <code class="language-plaintext highlighter-rouge">AuthorizationCheckerInterface</code>.</p>

<div class="tip">

  <p>Let symfony does the heavy lifting for you. Always use the security methods to check for roles.</p>

</div>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// BAD - $user-&gt;getRoles() will not know about the role hierarchy
<span class="gd">- $hasAccess = in_array('ROLE_ADMIN', $user-&gt;getRoles());
</span><span class="err">
</span>// GOOD - use of the normal security methods
<span class="gi">+ $hasAccess = $this-&gt;isGranted('ROLE_ADMIN');
+ $this-&gt;denyAccessUnlessGranted('ROLE_ADMIN');
</span><span class="err">
</span></code></pre></div></div>

<h2 id="decision-strategy">Decision Strategy</h2>

<p>When you start using voters, Symfony will ask each voter to vote on the access decision. There are three decisions
that a voter can make, like any other voting system:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code>: The voter grants access to the resource.</li>
  <li><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code>: The voter denies access to the resource.</li>
  <li><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code>: The voter abstains from voting.</li>
</ol>

<p>Normally, only one voter will vote at any given time, and all the rest will <code class="language-plaintext highlighter-rouge">abstain</code>. However, if you want to
change this behavior, you need to know about the <code class="language-plaintext highlighter-rouge">decision_strategy</code> configuration.</p>

<div class="tip">
  <p>It’s always good to keep the default <code class="language-plaintext highlighter-rouge">decision_strategy</code> and design your voters accordingly. A resource oriented
voter should only vote on the resource it is designed for.</p>
</div>

<p>Suppose you have a feature that requires a user to be part of a group and is older than 18 years. You have two separate
voters to check these conditions. The following table will help you understand different decision strategies:</p>

<table>
  <thead>
    <tr>
      <th>Decision Strategy</th>
      <th>Description</th>
      <th>Voter 1</th>
      <th>Voter 2</th>
      <th>Voter 3</th>
      <th>Result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>affirmative (default)</td>
      <td>This grants access as soon as there is one voter granting access</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
    </tr>
    <tr>
      <td>consensus</td>
      <td>This grants access if there are more voters granting access than denying. In case of a tie the decision is based on the allow_if_equal_granted_denied config option (defaulting to true);</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
    </tr>
    <tr>
      <td>unanimous</td>
      <td>This only grants access if there is no voter denying access.</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
    </tr>
    <tr>
      <td>priority</td>
      <td>This grants or denies access by the first voter that does not abstain, based on their service priority</td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_DENIED</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_ABSTAIN</code></td>
      <td><code class="language-plaintext highlighter-rouge">ACCESS_GRANTED</code></td>
    </tr>
  </tbody>
</table>

<p>Back to our example, if you want to grant access only if both voters grant access, you should use the <code class="language-plaintext highlighter-rouge">unanimous</code>
decision strategy.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config/packages/security.yaml</span>
<span class="na">security</span><span class="pi">:</span>
  <span class="na">access_decision_manager</span><span class="pi">:</span>
    <span class="na">strategy</span><span class="pi">:</span> <span class="s">unanimous</span>
    <span class="na">allow_if_all_abstain</span><span class="pi">:</span> <span class="kc">false</span>
</code></pre></div></div>

<h2 id="summary">Summary</h2>

<p>In this post, we covered some of the basics of Symfony’s security system that you should know before using voters.
understanding them will help you make the most out of Symfony’s security system. You should always consult the Symfony
documentation for the most up-to-date information and best practices. In the next article, we will cover how to create
a custom voter and how to use it in your application.</p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Voters are Symfony’s most powerful way of managing permissions. They allow you to centralize all permission logic, then reuse them in many places. In this post, We will cover some of the basics of Symfony’s security system that you should know before using voters.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/voting.webp" /><media:content medium="image" url="https://imdhemy.com/assets/img/voting.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The pipeline ate my code</title><link href="https://imdhemy.com/blog/generic/the-pipeline-ate-my-code.html/" rel="alternate" type="text/html" title="The pipeline ate my code" /><published>2024-03-30T00:00:00+00:00</published><updated>2024-03-30T00:00:00+00:00</updated><id>https://imdhemy.com/blog/generic/the-pipeline-ate-my-code</id><content type="html" xml:base="https://imdhemy.com/blog/generic/the-pipeline-ate-my-code.html/"><![CDATA[<p>I’m your teammate developer, and I’m here to tell you how my CI/CD pipelines aren’t like other pipelines. They are
always green, and they never fail. They can even fix my code before I push it to the repository. 🤯 Isn’t that cool? I’m
kidding, of course. My pipelines are just like yours. They fail, and they fail a lot.</p>

<p>Imagine working with a team member who exudes confidence at every turn, is self-centered, and repeatedly stumbles over
the simplest tasks. Welcome to the puzzling world of the <strong>Dunning-Kruger Effect</strong> <em>where the less you know, the more
you think you know, leaving you with a false sense of confidence.</em> This does not only affect your ability to learn and
grow, but it also affects the team’s productivity and morale leaving behind a trail of stressed-out and unsatisfied team
members.</p>

<p>In this article, we’ll shine a light on the challenges posed by such colleagues and explore strategies for mitigating
their impact on team productivity and morale.</p>

<h2 id="understanding-the-dunning-kruger-effect">Understanding the Dunning-Kruger Effect</h2>

<p>Let’s start by understanding
the <a href="https://www.semanticscholar.
org/paper/Unskilled-and-unaware-of-it%3A-how-difficulties-in-to-Kruger-Dunning
/f2c80eef3585e0569e93ace0b9770cf76c8ebabc?p2df">Dunning-Kruger Effect</a>. Imagine you are learning to play a musical instrument, and in your
mind, you are the next Beethoven. The reality? You sound more like a cat walking on a piano.</p>

<p>That’s the Dunning-Kruger Effect in action. It’s the tendency of individuals with limited knowledge or skills to
over-inflate their own abilities. They are unable to recognize their incompetence, leading them to believe they are
better than they actually are.</p>

<p>When you are in the presence of a colleague who is a victim of the Dunning-Kruger Effect, you might notice the following
traits:</p>

<ol>
  <li><strong>Inability to accept feedback</strong>: They are resistant to feedback and often dismiss it.</li>
  <li><strong>Lack of self-awareness</strong>: They are unable to recognize their own incompetence.</li>
  <li><strong>Inability to collaborate</strong>: They are unable to work effectively with others.</li>
  <li><strong>Inability to take responsibility</strong>: They are unable to take responsibility for their actions.</li>
  <li><strong>Inability to adapt</strong>: They are unable to adapt to new situations.</li>
  <li><strong>Inability to communicate</strong>: They are unable to communicate effectively.</li>
</ol>

<p>Responsibility isn’t just about ticking off boxes on a to-do list—it’s about understanding the bigger picture and how
your role fits into the grand scheme of things. It’s about being accountable for your actions and the impact they have
on the team’s success. In a software development setting, this means knowing your tasks inside out, collaborating
effectively with your peers, and owning up to your mistakes when things don’t go as planned. After all, a chain is only
as strong as its weakest link, and in a team environment, everyone’s contribution matters.</p>

<h2 id="impact-on-team-dynamics">Impact on Team Dynamics</h2>

<p>The Dunning-Kruger Effect can have a significant impact on team dynamics. When a team member is blinded by their
overconfidence, taking over tasks she is not qualified for without regard for collaboration nor feedback. This
misplaced confidence not only hinders her progress but also creates a friction within the team. Others are left
picking up the pieces, feeling frustrated and demotivated by the lack of accountability and miss-communication.</p>

<p>In a team environment, trust and collaboration are the cornerstones of success. When one team member fails to pull their
weight, it creates a ripple effect that can lead to missed deadlines, poor-quality work, and strained relationships.
The result? A fractured team struggling to stay afloat in a sea of discord.</p>

<h2 id="navigating-stress-and-frustration">Navigating Stress and Frustration</h2>

<p>As we come face to face with the challenges posed by the Dunning-Kruger team member, it’s essential to raise
awareness about the cost it takes on individual stress level. Being in a constant state of frustration, trying to
navigate the maze of misplaced confidence and lack of accountability, can take a toll on one’s mental health and
well-being. Their refusal to accept feedback and collaborate effectively can lead to a toxic work environment where
team members feel undervalued and unappreciated.</p>

<p>Navigating stress and frustration in such an environment requires patience, resilience, and a healthy dose of
self-care. Take a step back, breathe, and remind yourself that you’re doing the best you can in a challenging situation.
Seek support from trusted colleagues and mentors, and don’t hesitate to communicate your concerns with your team leader.
Together, we can weather the storm and emerge stronger on the other side.</p>

<p>It’s not that easy to talk openly about such issues, but it’s essential to address them before they escalate. It’s
the responsibility of the team leader to create a safe space where team members can voice their concerns without fear of
being judged or dismissed. The open and honest communication is the key to resolving conflicts.</p>

<h2 id="promoting-self-awareness-and-accountability">Promoting Self-Awareness and Accountability</h2>

<p>It’s important to promote self-awareness and accountability within the team. One of the effective ways for doing so is
encourage regular self-reflection. Encourage team members to take a step back and evaluate their performance
objectively, identifying areas for improvement and acknowledging their own shortcomings.</p>

<p>Additionally, it’s essential to foster a culture of open feedback and constructive criticism. This will help team
members to recognize the blind spots and work towards addressing them.</p>

<p>Accountability goes hand in hand with self-awareness. It’s about taking ownership of one’s actions and their impact on
the team’s success. Encourage team members to take responsibility for their mistakes and learn from them. This will not
only help them grow professionally but also foster a sense of trust and collaboration within the team. By fostering a
culture of transparency and accountability, we create an environment where continuous learning and improvement thrive.</p>

<h2 id="addressing-the-root-cause">Addressing the Root Cause</h2>

<p>Digging beneath the surface, uncovering the deep-rooted causes of this behavior is crucial to examine what give rise to
the Dunning-Kruger Effect within the team. Is it a lack of training and development opportunities? Is it a lack of
feedback and mentorship? Is it a lack of recognition and appreciation? By identifying the underlying causes, we can take
proactive steps to address them and create a supportive work environment where team
members can thrive.</p>

<h2 id="creating-a-supportive-work-environment">Creating a Supportive Work Environment</h2>

<p>Sometimes, our empathy towards our colleagues who are struggling with the Dunning-Kruger Effect or any other challenges
can affect our responsibility towards the other team members who are affected by their behavior. It’s essential to
strike a balance between empathy and accountability. Supportive work environment is not meant only for those who are
misplacing their confidence but also for those who are affected by their behavior.</p>

<p>On the other hand, embracing a culture of humility and continuous learning can help mitigate the issue. This
means recognizing that we all have areas where we can improve and that seeking assistance is not a sign of weakness, but
rather a demonstration of self-awareness and maturity. In a supportive work environment, team members are empowered to
share their challenges openly, knowing that their colleagues will offer support and guidance without judgment.</p>

<h2 id="conclusion-balancing-empathy-and-accountability">Conclusion: Balancing Empathy and Accountability</h2>

<p>In the dynamic landscape of software development, navigating the challenges posed by the Dunning-Kruger Effect
requires a delicate balance of empathy, accountability, and continuous learning. By fostering a supportive work
environment where humility, openness, and collaboration are championed, we can mitigate the impact of overconfidence,
empower team members to thrive, and build stronger, more resilient teams capable of overcoming any obstacle.</p>

<p>Helping a team member who struggles does not mean to forget about the other team members, they also need your support.
It’s about striking a balance between empathy and accountability.</p>]]></content><author><name>Dhemy</name></author><category term="generic" /><summary type="html"><![CDATA[I’m your teammate developer, and I’m here to tell you how my CI/CD pipelines aren’t like other pipelines. They are always green, and they never fail. They can even fix my code before I push it to the repository. 🤯 Isn’t that cool? I’m kidding, of course. My pipelines are just like yours. They fail, and they fail a lot.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/plumbers.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/plumbers.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Effective Node.js Modules - Part 2: ESM dynamic imports</title><link href="https://imdhemy.com/blog/nodejs/esm-dynamic-imports.html/" rel="alternate" type="text/html" title="Effective Node.js Modules - Part 2: ESM dynamic imports" /><published>2024-03-25T00:00:00+00:00</published><updated>2024-03-25T00:00:00+00:00</updated><id>https://imdhemy.com/blog/nodejs/esm-dynamic-imports</id><content type="html" xml:base="https://imdhemy.com/blog/nodejs/esm-dynamic-imports.html/"><![CDATA[<p>One of the main differences between CJS and ESM modules is the way they handle dynamic imports. In CJS you can use
<code class="language-plaintext highlighter-rouge">require</code> to import modules anywhere in your code, but in ESM you can only use <code class="language-plaintext highlighter-rouge">import</code> at the top level of your code.
What if you want to import a module dynamically in ESM?</p>

<p>In this post, we will create a simple <code class="language-plaintext highlighter-rouge">Hello world!</code> application that uses dynamic imports to greet the user in
different languages. If you don’t know how to enable ESM in Node.js, check the
<a href="/blog/nodejs/effective-nodejs-modules-part-1.html/">previous post</a>.</p>

<p>Below is the directory structure of our application:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── main.js
├── package.json
└── translations
    ├── ar.js
    ├── de.js
    └── en.js
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">translations</code> directory contains three files: <code class="language-plaintext highlighter-rouge">en.js</code>, <code class="language-plaintext highlighter-rouge">de.js</code>, and <code class="language-plaintext highlighter-rouge">ar.js</code>. Each file exports constants that
represent the greeting message in a specific language. Here are the contents of the files:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// translations/en.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">GREETING</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello world!</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// translations/ar.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">GREETING</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">مرحبا بالعالم!</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// translations/de.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">GREETING</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hallo Welt!</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">main.js</code> file is the entry point of our application. It gets the user’s preferred language from the command
line then imports the corresponding translation module dynamically if it exists.</p>

<p>Here is the content of the <code class="language-plaintext highlighter-rouge">main.js</code> file:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">de</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">ar</span><span class="dl">'</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">defaultLanguage</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">language</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="nx">defaultLanguage</span><span class="p">;</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">languages</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">language</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="s2">`Unsupported language: </span><span class="p">${</span><span class="nx">language</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">process</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Get advantage of top-level await</span>
<span class="kd">const</span> <span class="p">{</span><span class="nx">GREETING</span><span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="k">import</span><span class="p">(</span><span class="s2">`./translations/</span><span class="p">${</span><span class="nx">language</span><span class="p">}</span><span class="s2">.js`</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">GREETING</span><span class="p">);</span>
</code></pre></div></div>

<p>To run the application, execute the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node main.js de
</code></pre></div></div>

<p>In the <code class="language-plaintext highlighter-rouge">main.js</code> we used the <code class="language-plaintext highlighter-rouge">import()</code> expression, commonly called dynamic import. This expression will be evaluated
at runtime, and the module will be loaded asynchronously. The <code class="language-plaintext highlighter-rouge">await</code> keyword is used to wait for the module to be
loaded before continuing the execution.</p>

<div class="tip">
  <p>Use dynamic import only when necessary. The static form is preferable for loading initial dependencies, and can benefit more readily from static analysis tools and tree shaking.</p>
</div>

<p>That’s it! You have learned how to use dynamic imports in ESM modules.</p>]]></content><author><name>Dhemy</name></author><category term="nodejs" /><summary type="html"><![CDATA[One of the main differences between CJS and ESM modules is the way they handle dynamic imports. In CJS you can use require to import modules anywhere in your code, but in ESM you can only use import at the top level of your code. What if you want to import a module dynamically in ESM?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/dog-running.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/dog-running.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Effective Node.js Modules - Part 1: Basic Syntax</title><link href="https://imdhemy.com/blog/nodejs/effective-nodejs-modules-part-1.html/" rel="alternate" type="text/html" title="Effective Node.js Modules - Part 1: Basic Syntax" /><published>2024-01-07T00:00:00+00:00</published><updated>2024-01-07T00:00:00+00:00</updated><id>https://imdhemy.com/blog/nodejs/effective-nodejs-modules-part-1</id><content type="html" xml:base="https://imdhemy.com/blog/nodejs/effective-nodejs-modules-part-1.html/"><![CDATA[<p>Do you know what is the difference between the following two code snippets?</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">app</span><span class="p">,</span> <span class="nx">connection</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>And this one:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">app</span><span class="p">,</span> <span class="nx">connection</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./config.js</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Both of them import the <code class="language-plaintext highlighter-rouge">app</code> and <code class="language-plaintext highlighter-rouge">connection</code> from the <code class="language-plaintext highlighter-rouge">config</code> module, but the first one is using the <strong>CommonJS</strong> (
CJS) module system, and the second one is using the <strong>ECMAScript</strong> (ES) module system.</p>

<p>Modules allow you to split your code into small units, that can be reused and tested independently. They are also the
main way to enforce information hiding by exposing (exporting) only the public API of the module.</p>

<p>In this series of posts, we will talk about how to use modules effectively in your Node.js applications. By the end of
this series, you should be able to make pragmatic decisions about how to use modules effectively in your Node.js
applications.</p>

<table>
  <thead>
    <tr>
      <th>📋</th>
      <th>Posts in this series</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Basic Syntax</td>
    </tr>
    <tr>
      <td>2</td>
      <td><a href="/blog/nodejs/esm-dynamic-imports.html/">Dynamic imports</a></td>
    </tr>
  </tbody>
</table>

<p>Javascript was introduced in 1995 as a scripting language for browsers. It was not designed to be used as a server
language. Browsers should keep an eye on the security of the user and the system, so they need to limit the access of
the Javascript code to the system resources. The nature of the Javascript and the browser environment allowed the use
of the <code class="language-plaintext highlighter-rouge">script</code> tag to load Javascript code didn’t help the developers to write modular code. Developers used
multiple <code class="language-plaintext highlighter-rouge">script</code>
tags to load the Javascript code in the right order.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"foo.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"bar.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"baz.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>When Node.js was introduced in 2009 as a server-side Javascript runtime, it came with full access to the underlying
system resources. This allowed providing the CommonJS module system to allow developers to write modular code and
organize their applications into small reusable units.</p>

<h3 id="cjs-commonjs-module-system">CJS: CommonJS module system</h3>

<p>The CJS module system is the default module system of Node.js. <strong>CJS</strong> uses <code class="language-plaintext highlighter-rouge">require</code> to import modules
and <code class="language-plaintext highlighter-rouge">module.exports</code>or <code class="language-plaintext highlighter-rouge">exports</code> to export modules. <code class="language-plaintext highlighter-rouge">exports</code> is a reference to <code class="language-plaintext highlighter-rouge">module.exports</code>, so you can use either
of them to export modules as follows:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Awesome App</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Is the same as:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// config.js</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Awesome App</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">require</code> function returns the exported value of the module.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config.js</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="c1">// { app: { name: 'Awesome App', port: 3000 } }</span>
</code></pre></div></div>

<p>You can also use the <code class="language-plaintext highlighter-rouge">require</code> function to import a single module from a file that exports multiple modules.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// config.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">app</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Awesome App</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">port</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">connection</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">host</span><span class="p">:</span> <span class="dl">'</span><span class="s1">localhost</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">port</span><span class="p">:</span> <span class="mi">27017</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="p">{</span><span class="nx">connection</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config.js</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">connection</span><span class="p">)</span> <span class="c1">// { host: 'localhost', port: 27017 }</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="c1">// ReferenceError: app is not defined</span>
</code></pre></div></div>

<p>The CJS allows you to conditionally import modules using the <code class="language-plaintext highlighter-rouge">require</code> function. This is useful when you want to load
modules based on a specific condition.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.js</span>
<span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./config</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">let</span> <span class="nx">logger</span>
<span class="k">if </span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">app</span><span class="p">.</span><span class="nx">env</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">logger</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./silent-logger</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">logger</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./logger</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="esm-ecmascript-module-system">ESM: ECMAScript module system</h3>

<div class="tip">
  <p>
If you want to use ESM modules, you need to set the "type" to module "module" in the package.json file. Or name your files with the ".mjs" extension.
</p>
</div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// package.json</span>
<span class="p">{</span>
    <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span>
<span class="p">:</span>
    <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ECMAScript modules (ESM) are the standard official module system of Javascript. It was introduced in 2015 as part of
the ES6 specification. It was introduced with the goal of narrowing the gap between the browser and the server when
it comes to the module system. It was added to Node.js on <code class="language-plaintext highlighter-rouge">v8.5.0</code> as an experimental feature. By <code class="language-plaintext highlighter-rouge">v13.2.0</code>, loading
ESM modules became available without any command-line flags.</p>

<p>ESM uses <code class="language-plaintext highlighter-rouge">export</code> to export modules and <code class="language-plaintext highlighter-rouge">import</code> to import modules.</p>

<div class="tip">
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p&gt;ESM uses `export` in the singular format not `exports` like CJS.&lt;/p&gt;
</code></pre></div>  </div>
</div>

<p>The following example shows how to export a function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// sum.mjs</span>
<span class="kd">function</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{</span><span class="nx">sum</span><span class="p">}</span>
</code></pre></div></div>

<p>The following example shows how to import that function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">sum</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./sum.mjs</span><span class="dl">'</span> <span class="c1">// File extension is required to import relative modules</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span> <span class="c1">// 16</span>
</code></pre></div></div>

<p>You can also export a default module using the <code class="language-plaintext highlighter-rouge">export default</code> syntax. This is useful when you want to export a single
module from a file. Exporting a default module doesn’t prevent you from exporting other modules from the same file.</p>

<p>The following example shows how to export a default module:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// sum.mjs</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The following example shows how to import that function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>
<span class="k">import</span> <span class="nx">sum</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./sum.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span> <span class="c1">// 16</span>
</code></pre></div></div>

<p>The following example shows a mixed export of a default module and other modules:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// calculator.mjs</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">subtract</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">calculate</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// a magic function that takes a string input like "1 + 2" and returns the result</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you imported the default module, then you have access to the <code class="language-plaintext highlighter-rouge">calculate</code> function which is the default export of
the module. You can also give it any name you want.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">myCalculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">myCalculator</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>

<span class="nx">myCalculator</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// TypeError: myCalculator.sum is not a function</span>
</code></pre></div></div>

<p>If you imported the module using the <code class="language-plaintext highlighter-rouge">import * as</code> syntax, then you have access to all the exported modules.
The <code class="language-plaintext highlighter-rouge">import * as</code>
imports all the exported modules in a single object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">calculator</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// -1</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">calculator</span><span class="p">.</span><span class="k">default</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>As you already noticed, using something like <code class="language-plaintext highlighter-rouge">calculator.default</code> is not very convenient. You can get the same
result by the following readable syntax:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">calculate</span><span class="p">,</span> <span class="p">{</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">subtract</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// -1</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">calculate</code> is our custom name for the default export of the module, the other modules are imported using their
original names. You can also use the <code class="language-plaintext highlighter-rouge">as</code> keyword to rename the imported modules.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">calculate</span><span class="p">,</span> <span class="p">{</span><span class="nx">sum</span> <span class="nx">as</span> <span class="nx">add</span><span class="p">,</span> <span class="nx">subtract</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./calculator.mjs</span><span class="dl">'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">subtract</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">// -1</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">calculate</span><span class="p">(</span><span class="dl">'</span><span class="s1">1 + 2</span><span class="dl">'</span><span class="p">))</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>The ESM modules doesn’t support conditionally importing modules. All the imports should be at the top of the file.</p>

<div class="danger">
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p&gt;The following code will throw a SyntaxError: &lt;/p&gt;
</code></pre></div>  </div>
</div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.mjs</span>

<span class="k">import</span> <span class="nx">config</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./config.mjs</span><span class="dl">'</span>

<span class="k">if </span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">app</span><span class="p">.</span><span class="nx">env</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
<span class="k">import</span>
    <span class="nx">logger</span>
    <span class="k">from</span>
    <span class="dl">'</span><span class="s1">./silent-logger.mjs</span><span class="dl">'</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="k">import</span>
    <span class="nx">logger</span>
    <span class="k">from</span>
    <span class="dl">'</span><span class="s1">./logger.mjs</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="summary">Summary</h2>

<p>In this post, we talked about the basic syntax of the CJS and ESM modules. We talked about how to import and export
modules using both module systems. We didn’t cover all the details, but we covered the basics that you need to know to
differentiate between the two module systems.</p>

<p><sub>
Image: <a href="https://unsplash.com/photos/a-dog-lays-on-a-bed-next-to-a-laptop-IGfoMhQhtwo">Photo by Jorge Rosal on Unsplash</a></sub></p>]]></content><author><name>Dhemy</name></author><category term="nodejs" /><summary type="html"><![CDATA[Do you know what is the difference between the following two code snippets?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/dog-laptop-code-bed.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/dog-laptop-code-bed.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">From Code to German: My First Steps Towards Learning a New Language</title><link href="https://imdhemy.com/blog/germany/from-code-to-german.html/" rel="alternate" type="text/html" title="From Code to German: My First Steps Towards Learning a New Language" /><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><id>https://imdhemy.com/blog/germany/from-code-to-german</id><content type="html" xml:base="https://imdhemy.com/blog/germany/from-code-to-german.html/"><![CDATA[<p>For years, I have been dedicated to writing code every day and contributing to various
projects. <a href="https://github.com/imdhemy">My GitHub account</a> showcases my commitment and hard work. Since I moved
from Egypt to Frankfurt am Main, Germany, I’ve decided to do the same with learning German, but Unfortunately, I
couldn’t keep doing both at the same time. I had to choose one of them, and I decided to take a break from coding and
focus on learning the German language. It’s not a complete break, though. I will still be contributing to open source
projects, and I’m writing code every day in my job, But I mean a break from that habit of writing code every day for
open source projects.</p>

<p>As an expat in a foreign country, learning the local language is vital not only for practical purposes but also for
understanding the culture better. I have tried learning a new language in the past, particularly Turkish, but I failed
to do so. However, I have faith that German is different, and my background in English, which has some similarities with
German, may give me an edge.</p>

<p>To begin my language learning journey, I set a goal to finish one lesson per week from
the <a href="https://www.hueber.de/menschen">Menschen book</a>, a popular German language textbook for adults and young adults
designed according to the latest findings in educational psychology as they describe it.</p>

<p>I already tried some applications like Duolingo and Babbel, but I didn’t like them. I prefer a more structured approach
to learning a new language. I want to learn the language in a way similar to how I learned English which I learned from
the “Hello” series of books.</p>

<p>I’ve just completed my first lesson, and it feels like a great accomplishment. The first lesson introduced me to the
basics of the German language, such as the alphabet, how to ask about names, how say “how are you” and so on.</p>

<p>In addition to the book, I planned to practice speaking German for 10 minutes every day. My first attempt was
challenging, I couldn’t pronounce correctly, and I was quite nervous. I’m not sure if I will be able to do it every day,
but I will try my best.</p>

<p>Learning a new language is challenging, and I’ve already encountered some difficulties, particularly with the
pronunciation of some German words. However, I’m optimistic that with persistence and hard work, I’ll be able to master
the language.</p>

<p>In conclusion, I believe that taking the first step towards learning a new language is always the hardest, but it’s also
the most important. If you’re thinking of learning a new language, don’t be afraid to start, even if it’s just for ten
minutes a day. You’ll be amazed at how much progress you can make with consistent effort. Believe me, I did the same
with coding, and I gained a lot of experience and knowledge. Hopefully, I’ll be able to do the same with German.</p>]]></content><author><name>Dhemy</name></author><category term="germany" /><summary type="html"><![CDATA[For years, I have been dedicated to writing code every day and contributing to various projects. My GitHub account showcases my commitment and hard work. Since I moved from Egypt to Frankfurt am Main, Germany, I’ve decided to do the same with learning German, but Unfortunately, I couldn’t keep doing both at the same time. I had to choose one of them, and I decided to take a break from coding and focus on learning the German language. It’s not a complete break, though. I will still be contributing to open source projects, and I’m writing code every day in my job, But I mean a break from that habit of writing code every day for open source projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/frankfurt-blossom.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/frankfurt-blossom.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hidden Gems in Composer Every PHP Developer Should Know</title><link href="https://imdhemy.com/blog/php/hidden-gems-in-composer.html/" rel="alternate" type="text/html" title="Hidden Gems in Composer Every PHP Developer Should Know" /><published>2023-04-16T00:00:00+00:00</published><updated>2023-04-16T00:00:00+00:00</updated><id>https://imdhemy.com/blog/php/hidden-gems-in-composer</id><content type="html" xml:base="https://imdhemy.com/blog/php/hidden-gems-in-composer.html/"><![CDATA[<p>Composer is the most popular PHP dependency manager. I’ve heard about other package managers like <code class="language-plaintext highlighter-rouge">PEAR</code> &amp; <code class="language-plaintext highlighter-rouge">Phing</code>, but
I’ve never used them. While many developers are familiar with basic Composer commands like <code class="language-plaintext highlighter-rouge">install</code>, <code class="language-plaintext highlighter-rouge">update</code>,
and <code class="language-plaintext highlighter-rouge">require</code>, there are several hidden gems in Composer that can make maintaining your dependencies easier. In this
blog post, We’ll explore some of these hidden gems.</p>

<h2 id="1-composer-bump--composer-audit">1. composer bump &amp; composer audit</h2>

<p>Composer 2.4 added two new commands <code class="language-plaintext highlighter-rouge">composer bump</code> and <code class="language-plaintext highlighter-rouge">composer audit</code>.</p>

<p><code class="language-plaintext highlighter-rouge">composer bump</code> “bumps” the package version constraints listed in the composer.json file by increasing them to the
latest version within the allowed constraints.</p>

<p><code class="language-plaintext highlighter-rouge">composer audit</code>, scans the installed packages for reported security vulnerabilities. It exists with an error code if
there are any packages installed with known security vulnerabilities.</p>

<p>You can read more about them in the official <a href="https://php.watch/articles/composer-24">blog post</a>.</p>

<h2 id="2-composer-outdated">2. composer outdated</h2>

<p>Keeping your dependencies up-to-date is important for security and compatibility reasons. However, it can be
time-consuming to manually check for updates to each package in your project. This is where <code class="language-plaintext highlighter-rouge">composer outdated</code> comes
in. This command lists all the packages that have newer versions available, this comes with a color legend to help you
determine which packages are recommended to update or just possible to update.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer outdated
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Color legend:
- patch or minor release available - update recommended
- major release available - update possible

Direct dependencies required <span class="k">in </span>composer.json:
blackfire/php-sdk                  v1.33.0            v1.35.0            Blackfire.io PHP SDK
doctrine/annotations               1.14.3             2.0.1              Docblock Annotations Parser

... Other packages are omitted <span class="k">for </span>brevity ...

</code></pre></div></div>

<h2 id="3-composer-show-latest">3. composer show –latest</h2>

<p>Similar to composer outdated, <code class="language-plaintext highlighter-rouge">composer show --latest</code> shows you the latest version of each package that is available on
the remote repository. This can be helpful for keeping track of the latest package versions and deciding when to update
your project. The <code class="language-plaintext highlighter-rouge">composer show</code> command has a lot of other useful options that you can explore by running
<code class="language-plaintext highlighter-rouge">composer show --help</code>.</p>

<h2 id="4-composer-why--composer-why-not">4. composer why &amp; composer why-not</h2>

<p>Sometimes, when you try to install a package with Composer, it fails due to dependency conflicts or other issues. In
these situations, it can be difficult to determine why the package cannot be installed. This is where <code class="language-plaintext highlighter-rouge">composer why</code> and
<code class="language-plaintext highlighter-rouge">composer why-not</code> come in.</p>

<p><code class="language-plaintext highlighter-rouge">composer why</code> command tells you which other packages depend on a certain package. For example, you can run the
following command to find out which packages depend on <code class="language-plaintext highlighter-rouge">vimeo/psalm</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer why vimeo/psalm
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">composer why-not</code> shows you a detailed explanation of why a package cannot be installed, including all the packages
that are blocking it. This can be helpful for troubleshooting complex dependency issues. Specify a version constraint to
verify whether upgrades can be performed in your project, and if not why not. See the following example to find out why
PHPUnit 10 cannot be installed in your project:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer why-not phpunit/phpunit 10
</code></pre></div></div>

<h2 id="5-composer-with-dependencies">5. composer –with-dependencies</h2>

<p>The <code class="language-plaintext highlighter-rouge">composer update</code>, <code class="language-plaintext highlighter-rouge">composer require</code>, and <code class="language-plaintext highlighter-rouge">composer remove</code> commands have a <code class="language-plaintext highlighter-rouge">--with-dependencies</code> and
<code class="language-plaintext highlighter-rouge">--with-all-dependencies</code> option that can be used to update all the dependencies of a package. This can be useful when
you want to update a package and all the packages that depend on it. For example, you can run the following command to
update the <code class="language-plaintext highlighter-rouge">symfony/console</code> package and all the packages that depend on it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer update symfony/console <span class="nt">--with-dependencies</span>
</code></pre></div></div>

<p>There are shortcuts for these options, you can use <code class="language-plaintext highlighter-rouge">-W</code> and <code class="language-plaintext highlighter-rouge">-w</code> instead of <code class="language-plaintext highlighter-rouge">--with-dependencies</code> and
<code class="language-plaintext highlighter-rouge">--with-all-dependencies</code>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--with-dependencies (-w)</code>: Update also dependencies of packages in the argument list, except those which are root
requirements.</li>
  <li><code class="language-plaintext highlighter-rouge">--with-all-dependencies (-W)</code>: Update also dependencies of packages in the argument list, including those which are
root requirements.</li>
</ul>

<p>It’d be better to use the short versions as they work fine with different commands like <code class="language-plaintext highlighter-rouge">composer require</code> that has a
<code class="language-plaintext highlighter-rouge">--update-with-dependencies (-w)</code> and <code class="language-plaintext highlighter-rouge">--update-with-all-dependencies (-W)</code> option.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Upgrading your dependencies can be a tedious task, but it’s important to keep your project up-to-date. Using the
mentioned commands can help you resolve dependency issues and keep your project up-to-date. I hope you found this
article useful.</p>

<p><small>Photo by <a href="https://unsplash.com/@dtopkin1">Dayne Topkin</a> on <a href="https://unsplash.com">Unsplash</a></small></p>]]></content><author><name>Dhemy</name></author><category term="php" /><summary type="html"><![CDATA[Composer is the most popular PHP dependency manager. I’ve heard about other package managers like PEAR &amp; Phing, but I’ve never used them. While many developers are familiar with basic Composer commands like install, update, and require, there are several hidden gems in Composer that can make maintaining your dependencies easier. In this blog post, We’ll explore some of these hidden gems.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imdhemy.com/assets/img/glass-on-music-notes.jpeg" /><media:content medium="image" url="https://imdhemy.com/assets/img/glass-on-music-notes.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>